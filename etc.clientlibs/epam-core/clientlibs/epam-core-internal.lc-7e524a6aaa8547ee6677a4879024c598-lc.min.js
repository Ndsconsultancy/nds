define(function () {
  window.dust &&
    ((window.dust.helpers = dust.helpers || {}),
    (window.dust.helpers.i18n = function (h, d, a, m) {
      a = dust.helpers.tap(m.key, h, d);
      var k = dust.helpers.tap(m.locale, h, d);
      m = dust.helpers.tap(m.placeholders, h, d) || "";
      d = CQ.I18n.getLocale();
      if (k && k !== d) {
        CQ.I18n.setLocale(k);
        var c = !0;
      }
      a = CQ.I18n.getMessage(a, m.split(","));
      c && CQ.I18n.setLocale(d);
      return h.write(a);
    }),
    (window.dust.helpers.tap = function (h, d, a) {
      if ("function" !== typeof h) return h;
      var m = "";
      h = d
        .tap(function (a) {
          m += a;
          return "";
        })
        .render(h, a);
      d.untap();
      if (h.constructor !== d.constructor) return h;
      if (m.length) return m;
    }));
});
define("jquery-plugins", ["media", "constants"], function (h, d) {
  function a(c, g) {
    function k() {
      return h.currentMode().lessThan(h.modes.Desktop);
    }
    function r() {
      l.removeClass("pinned-filter--fixed pinned-filter--bottom");
      l.removeAttr("style");
      y.height(0);
    }
    function n(b) {
      l.toggleClass("pinned-filter--fixed", b).toggleClass(
        "pinned-filter--bottom",
        !b
      );
      f.toggleClass(C, b);
      x && l.css("transform", "translateY(" + x + "px)");
    }
    function p(l) {
      var f = v.scrollTop(),
        x =
          (g && g.getPanelTopOffset && g.getPanelTopOffset()) ||
          b.offset().top - ((g && g.value) || 0),
        e = b.outerHeight(!0);
      if (-1 !== x) {
        if (t && k()) return "pinTop";
        if (!c && f > x + e - l) return "pinBottom";
        if (f + 1 > x - 65 + ((k() && w.outerHeight(!0)) || 0)) return "pinTop";
        if (a.currentlyPinned === b) return "unpin";
      }
    }
    function q() {
      if (f.hasClass(C)) {
        var b = l.outerHeight(!0);
        y.height(b);
      }
    }
    var t = this.data("is-always-pinned-on-responsive"),
      w = $(".recruiting-search__form"),
      b = this,
      v = $(window),
      f = $("body"),
      l = this.find(".pinned-filter"),
      x = l.data("extra-height"),
      A = this.find(".pinned-filter__button"),
      F = this.find(".pinned-filter__container"),
      y = this.find(".pinned-filter__spacer"),
      C = d.Classes.pinnedFilter;
    v.scroll(function () {
      var x =
        t && k()
          ? !1
          : m.hasClass(d.Classes.noscroll) ||
            !l.length ||
            (!c && !b.isOnScreen());
      if (x) r();
      else {
        var v = l.outerHeight(!0);
        x = {
          pinBottom: function () {
            n(!1);
            y.height(v);
          },
          pinTop: function () {
            v = (g && g.getSpacerHeight()) || v;
            y.height(v);
            n(!0);
            a.currentlyPinned = b;
          },
          unpin: function () {
            f.removeClass(C);
            r();
          },
        };
        var h = p(v);
        h && x[h]();
      }
    });
    A.on("click", function () {
      if (h.currentMode().lessThan(h.modes.Desktop)) {
        var l = A.attr("aria-expanded");
        A.attr("aria-expanded", "false" === l);
        b.toggleClass("filter--slide-open");
        F.slideToggle("filter--slide-open", q);
      }
    });
    !h.currentMode().lessThan(h.modes.Desktop) && A.attr("tabindex", -1);
  }
  var m = $("html"),
    k = (function () {
      var c = [],
        a;
      new FontFaceObserver("Source Sans Pro").load(null, 2e4).then(
        function () {
          a = !0;
          c.forEach(function (c) {
            c();
          });
          $("body").addClass("fonts-loaded");
        },
        function () {
          console.error(
            "It takes too long to load the font. Some functionality can be dropped due to the timeout."
          );
        }
      );
      return function (g) {
        a ? g() : c.push(g);
      };
    })();
  $.extend({
    isPromise: function (c) {
      return "undefined" !== typeof c &&
        null !== c &&
        "function" === typeof c.then
        ? String(c.then) === String($.Deferred().then)
        : !1;
    },
    isOffsetEqual: function (c) {
      return c && c.length
        ? c
            .map(function (c) {
              return $(c).offset().top;
            })
            .reduce(function (c, a) {
              return c === a;
            })
        : !1;
    },
    onFontLoad: k,
  });
  $.fn.extend({
    findByAttr: function (c, a) {
      return this.filter(function () {
        return $(this).attr(c) === a;
      });
    },
    findByValue: function (c) {
      return this.filter(function () {
        return "number" === typeof c
          ? +$(this).val() === c
          : $(this).val() === c;
      });
    },
    scrollToSelector: function (c) {
      var a = c || {};
      c = a.duration || 100;
      this.length &&
        ((a = a.reservedSpace
          ? this.offset().top - a.reservedSpace
          : this.offset().top),
        $("html, body").animate({ scrollTop: a }, c));
    },
    pinFilterTop: a,
    isOnScreen: function () {
      var c = $(window),
        a = c.scrollTop();
      c = a + c.height();
      var d = this.offset().top,
        m = d + this.outerHeight();
      return d <= c && m >= a;
    },
  });
});
define("analytics", [], function () {
  function h(a) {
    window.dataLayer && a && dataLayer.push(a);
  }
  function d(a) {
    var d = a.data("gtmCategory"),
      c = a.data("gtmAction");
    if (d && c) {
      var g = a.data("gtmCustomDimensions");
      a = {
        event: "googleAnalyticsEvent",
        eventCategory: d,
        eventAction: c,
        eventLabel: a.data("gtmLabel"),
      };
      return $.extend(a, g);
    }
  }
  function a(a) {
    var k = d(a);
    return function () {
      return h(k);
    };
  }
  return {
    push: h,
    getEvent: d,
    initGoogleTagManager: function () {
      $(
        ".button-ui, .cta-button-ui, .timeline-slider__switcher-button, .referral-block__button"
      ).each(function () {
        var d = $(this);
        d.on("click", a(d));
      });
    },
  };
});
define("constants", ["media"], function (h) {
  var d = {
    items: 1,
    margin: 20,
    nav: !0,
    responsiveRefreshRate: 0,
    responsive: {},
  };
  d.responsive[h.modes.Broad.start] = { items: 4 };
  d.responsive[h.modes.Desktop.start] = { items: 3 };
  d.responsive[h.modes.Tablet.start] = { items: 2 };
  return {
    DateFormats: {
      ALPHABETIC_SHORT_MONTH_SHORT_DAY: "MMM D",
      ALPHABETIC_SHORT_MONTH_FIRST_WITHOUT_YEAR: "MMM DD",
      ALPHABETIC_LONG_DAY_FIRST_WITHOUT_YEAR: "DD MMMM",
    },
    CarouselDefaultConfig: d,
    Events: {
      menuOpen: "menu.open",
      menuClose: "menu.close",
      overlayShow: "overlay.show",
      overlayHide: "overlay.hide",
      transitionStart:
        "webkitTransitionStart otransitionstart oTransitionStart msTransitionStart transitionstart",
      transitionEnd:
        "webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend",
      showVacancyForm: "vacancyForm.show",
      searchOpen: "continuum.search.open",
      initConsent: "experience.checkbox.added",
      autocompleteSelected: "autocomplete.select.selected",
      featureGridAddedNewItems: "feature.grid.added.new.items",
      locationSelectCityUpdate: "location.select.city.update",
      locationSelectRegionUpdate: "location.select.region.update",
      locationSelectZipCodeUpdate: "location.select.zipCode.update",
      multiSelectUpdate: "multiselect.filter.items.update",
      multiSelectFirstUpdate: "first.multiselect.filter.items.update",
      multiSelectShouldUpdate: "should.multiselect.filter.items.update",
      multiSelectBeforeUpdate: "should.multiselect.filter.before.update",
      multiSelectErrorUpdate: "error.multiselect.filter.update",
      gatedFormExpanded: "gated.form.expanded",
      gatedFormCollapse: "collapse.gated.form",
      themeSwitch: "theme.switched",
      tabChange: "tab.change",
      tabChanged: "tab.changed",
      sliderResize: "slider.resize",
      sliderResized: "custom.slider.resized",
      sliderReady: "slider.ready",
    },
    Classes: {
      hidden: "hidden",
      noscroll: "noscroll",
      overlay: "overlay",
      overlayCoverHeader: "overlay__cover-header",
      preloader: "preloader",
      pinnedFilter: "has-pinned",
    },
    Keys: {
      arrowUp: "ArrowUp",
      arrowDown: "ArrowDown",
      arrowLeft: "ArrowLeft",
      arrowRight: "ArrowRight",
      home: "Home",
      end: "End",
      tab: "Tab",
      esc: "Escape",
      enter: "Enter",
      space: " ",
    },
    StorageKey: {
      utmParameters: "utmParameters",
      skillsUpdate: "should-skills-update",
      themeSwitcher: "theme-mode",
    },
    FilterTypes: { filter: "filter", careers_blog: "careers-blog" },
    Themes: {
      dark: "dark-mode",
      light: "light-mode",
      ec: "dark-mode ec-mode",
      animation: "theme-animation",
      animationDuration: 500,
    },
  };
});
define(
  "form",
  "utils-browser linkedinModule utils-env utils analytics media constants ReCaptcha SolutionsHubReferrer jquery-plugins".split(
    " "
  ),
  function (h, d, a, m, k, c, g, u, r) {
    function n(l, a) {
      if ($.isFunction(a.cleanField))
        a.form.on(b.CLEAN_UP, function (b, l) {
          (l && l.mandatoryOnly && !a.mandatoryCleanUp) || a.cleanField();
        });
      if (a.field) {
        var f = $.isFunction(a.validator),
          c = a.form.find('[name\x3d"' + a.field + '"]');
        if ($.isFunction(a.displayValue))
          a.form.on(b.DISPLAY_VALUE + ":" + a.field, a.displayValue);
        f && (l.validators[a.field] = a.validator);
        if (a.validationEvent && f) {
          var d = q(a.form, a.field, a.validator);
          c.on(a.validationEvent, d);
        }
        if ($.isFunction(a.displayError))
          a.form.on(b.VALIDATION + ":" + a.field, function (l, f) {
            f.checkFields && a.form.trigger(b.VALIDATION);
            $.isFunction(a.cleanError) &&
              (a.cleanError(),
              f.self &&
                f.self.continuumStyle &&
                f.self.submitButton.removeClass(v.buttonErrorValidation));
            f &&
              f.errors &&
              f.errors.length &&
              (a.displayError(f.errors[0]),
              f.self &&
                f.self.continuumStyle &&
                f.self.submitButton.addClass(v.buttonErrorValidation));
          });
        return d;
      }
    }
    function p(b, a, f) {
      var l = [];
      if (a) {
        a = cq5forms_isEmpty;
        var c = 1 < b.length ? b.toArray() : b.get(0);
        a = a(c) || (b.is("select") && !b.val());
      }
      a && (a = !b.is(":checkbox") || b.is(":visible") ? !0 : void 0);
      a &&
        ((f =
          !b.is("select") ||
          ("applicantYearsOfExperience" !== b.attr("name") &&
            "applicantNoticePeriod" !== b.attr("name"))
            ? f
            : CQ.I18n.getMessage(
                "component.dropdown.experience.required-message"
              )),
        l.push(f));
      return l;
    }
    function q(a, f, c) {
      return function (l, d) {
        if (!d || !d.withoutValidation)
          return (
            (l = c()),
            $.isArray(l)
              ? a.trigger(b.VALIDATION + ":" + f, {
                  errors: l,
                  checkFields: !0,
                })
              : $.isPromise(l) &&
                $.when(l).then(function (l) {
                  a.trigger(b.VALIDATION + ":" + f, {
                    errors: l,
                    checkFields: !0,
                  });
                }),
            l
          );
      };
    }
    function t() {
      var b = require("Checkbox"),
        a = this.form.find(".checkbox-ui");
      $.each(a, function (a, f) {
        new b($(f));
      });
    }
    function w(a) {
      function f(b) {
        if ($.isArray(b)) {
          var a = $.Deferred();
          a.resolve(b);
          return a.promise();
        }
        if ($.isPromise(b)) return b;
        throw "Validation function should return either promise or array";
      }
      var l = this;
      l.form = a;
      l.validators = {};
      l.validate = function (a, c, d) {
        var g = [],
          x = [];
        $.each(this.validators, function (b, a) {
          a = a();
          x.push(b);
          g.push(f(a));
        });
        g.length
          ? $.when.apply($, g).then(function () {
              d ||
                $.each(arguments, function (a, f) {
                  l.form.trigger(b.VALIDATION + ":" + x[a], { errors: f });
                });
              a(arguments);
            }, c)
          : a([]);
      };
    }
    var b = {
        CLEAN_UP: "FORM_FIELD_CLEANUP",
        VALIDATION: "FIELD_VALIDATION_RESULT",
        DISPLAY_VALUE: "DISPLAY_VALUE",
        FORM_INITIALIZED: "FORM_INITIALIZED",
        AJAX_START: "AJAX_START",
        ACTIVATE_FORM: "ACTIVATE_FORM",
        FORM_START: "Form start",
        SUBMIT_WITH_LINKEDIN_AUTOFILL: "Submit with LinkedIn AutoFill",
      },
      v = { buttonErrorValidation: "button-error-validation" },
      f =
        ":formid :formstart _charset_ :userDeviceType :isTouchDevice userAgent :cq_csrf_token :testingMode formType".split(
          " "
        );
    return {
      events: b,
      registerField: function (a) {
        if (a && a.form) {
          var f = a.form.data("validator");
          if (f) return n(f, a);
          a.form.on(b.FORM_INITIALIZED, function (b, f) {
            n(f.formValidator, a);
          });
        }
      },
      requiredValidator: function (b, a) {
        return function () {
          return p(b, a.isRequired, a.requiredMsg);
        };
      },
      constraintValidator: function (b, a) {
        return function () {
          var f = p(b, a.isRequired, a.requiredMsg),
            l;
          if ((l = !f.length))
            (l = a.constraintRegex),
              (l =
                !cq5forms_isEmpty(b.get(0)) &&
                !new RegExp(l.substring(1, l.length - 1)).test(b.val()));
          l && f.push(a.constraintMsg);
          return f;
        };
      },
      validationCallback: q,
      extractValidationContext: function (b) {
        return {
          isRequired: b.data("required"),
          requiredMsg: b.data("required-msg") || "This field is required",
          constraintRegex: b.data("regex"),
          constraintMsg: b.data("constraint-msg") || "Field is not valid",
        };
      },
      DEFAULT_REQUIRED_MSG: "This field is required",
      DEFAULT_CONSTRAINT_MSG: "Field is not valid",
      FormComponent: function (l, x) {
        function A() {
          var f = l.find(".recaptcha-ui");
          e.element = l;
          e.form = e.element.find("form");
          e.actionUrl = e.form.attr("action");
          e.errorMessageContainer = l.find(".form-component__error");
          e.errorMessage = e.errorMessageContainer.find(
            ".form-component__error-message"
          );
          $(document.body).hasClass("dark-mode") ||
          $(document.body).hasClass("light-mode") ||
          $(document.body).hasClass("ec-mode")
            ? ((e.errorSubmitAgain = l.find(
                ".form-component__error .submit-again-redesign"
              )),
              (e.successSubmitAgain = l.find(
                ".form-component__success .submit-again-redesign"
              )))
            : ((e.errorSubmitAgain = l.find(
                ".form-component__error .submit-again"
              )),
              (e.successSubmitAgain = l.find(
                ".form-component__success .submit-again"
              )));
          e.successMessageContainer = l.find(".form-component__success");
          e.submitButton = l.find("div.button-submit button");
          e.fieldNames = [];
          e.formValidator = new w(e.form);
          e.gtmEventData = k.getEvent(e.element);
          e.isAuthor = a.isAuthor();
          e.form.data("validator", e.formValidator);
          e.form.trigger(b.FORM_INITIALIZED, {
            formValidator: e.formValidator,
          });
          var c = e.form.find(".captcha-ui");
          e.hasRecaptcha =
            (f.length && !c.length) ||
            (f.length && !!c.length && c.data("recaptcha-enabled"));
          e.hasRecaptcha &&
            ((f = l.find(".recaptcha-ui")),
            f.data("recaptcha-enabled", "true"),
            (e.recaptcha = new u(f, e)));
          e.element.on(g.Events.gatedFormExpanded, function () {
            q("open");
          });
          e.element.on(g.Events.gatedFormCollapse, function () {
            q("close");
          });
        }
        function n(b) {
          b.one("input select2:select", function () {
            p();
          });
        }
        function y(b) {
          var a = k.getEvent(e.element);
          (a = a && $.extend({}, a, { eventAction: b })) && k.push(a);
        }
        function p() {
          B || ((B = !0), y(b.FORM_START));
        }
        function q(b) {
          "close" === b
            ? e.element.addClass("hide-autofill-button")
            : "open" === b
            ? e.element.removeClass("hide-autofill-button")
            : 0 === parseFloat(e.form.css("max-height"))
            ? e.element.addClass("hide-autofill-button")
            : e.element.removeClass("hide-autofill-button");
        }
        function D(b) {
          [].slice.call(b, 0).some(function (b) {
            return b.length;
          })
            ? (e.element.addClass("has-error"),
              e.continuumStyle &&
                e.submitButton.addClass(v.buttonErrorValidation),
              e.form.trigger("form.scrollToError"),
              e.activateForm())
            : (e.continuumStyle &&
                e.submitButton.removeClass(v.buttonErrorValidation),
              e.form.trigger("submit", { validated: !0 }));
        }
        function E(a, f) {
          e.submitButton.prop("disabled", !a);
          e.form.toggleClass("freeze", !a);
          a &&
            ((e.firstElement = e.form
              .find('a, button, input:visible, div[tabindex\x3d"0"]')
              .first()),
            e.hasRecaptcha && e.recaptcha.reset(),
            e.form.trigger(b.ACTIVATE_FORM, [f]));
        }
        var e = this;
        e.continuumStyle = x;
        var z = !!document.querySelector("script[data-mode\x3d'BUTTON_DATA']"),
          G = !!l.find(".linkedin-autofill")[0],
          H = l
            .find('[name\x3d"widget-holder"]')
            .attr("data-gtm-action-linkedin"),
          B = !1;
        this.scrollToMessage = function () {
          e.element.scrollToSelector({ reservedSpace: 100 });
        };
        this.scrollToError = function () {
          var b = e.element.find(".validation-field").first();
          e.beforeScrollToError && e.beforeScrollToError(b);
          b.find(".validation-focus-target").last().focus();
          b.length && b.first().scrollToSelector({ reservedSpace: 100 });
        };
        this.initialize = function () {
          A();
          z && (d.addForm(e.element), d.addCallbackForStartForm(p));
          n(e.form);
          e.hasRecaptcha && e.recaptcha.render();
          $(window).on("pageshow", function () {
            e.activateForm({ firstRun: !0 });
          });
          e.form.on("submit", function (b, a) {
            b.preventDefault();
            r.setReferrerHiddenField(e.form[0]);
            !e.hasRecaptcha && e.disableForm();
            if (!a || !a.validated)
              return (
                e.form.data("validator").validate(D, e.activateForm, !1), !1
              );
            e.hasRecaptcha && e.recaptcha.execute();
            if (!e.hasRecaptcha) return e.submitForm();
          });
          e.continuumStyle &&
            e.form.on(b.VALIDATION, function () {
              e.form.data("validator").validate(
                function (b) {
                  [].slice.call(b, 0).some(function (b) {
                    return b.length;
                  }) ||
                    (e.continuumStyle &&
                      e.submitButton.removeClass(v.buttonErrorValidation));
                },
                function () {},
                !0
              );
            });
          e.successSubmitAgain.on("click", function () {
            e.activateForm();
            e.element.removeClass("show-success");
            e.firstElement.focus();
            z &&
              (d.getLinkedInConfigByType("CONVERSION") &&
                d.changeLinkedinMode("CONVERSION", "BUTTON_DATA"),
              d.triggerLinkedInScript(),
              d.resetApplyWithLinkedin());
            return (B = !1);
          });
          e.errorSubmitAgain.on("click", function (b) {
            b.preventDefault();
            z &&
              (d.showLinkedinWidget(),
              d.showLinkedinWidgetV3(),
              d.resetApplyWithLinkedin());
            e.activateForm({ type: "pageshow" });
            e.element.removeClass("show-error");
            e.firstElement.focus();
            B = !1;
          });
          e.form.on("trigger.form.validation", function () {
            e.form.data("validator").validate(D, e.activateForm, !1);
          });
          e.form
            .find('[name\x3d":userDeviceType"]')
            .attr(
              "value",
              c.currentMode().lessThan(c.modes.Tablet)
                ? "mobile"
                : c.currentMode().lessThan(c.modes.Desktop)
                ? "tablet"
                : "desktop"
            );
          e.form
            .find('[name\x3d":isTouchDevice"]')
            .attr("value", m.hasTouchEvents());
          e.form
            .find('[name\x3d"userAgent"]')
            .attr("value", navigator.userAgent || "browser");
          e.form
            .find('[name\x3d"userReferrer"]')
            .attr("value", document.referrer);
          e.form.on("form.scrollToError", e.scrollToError);
          e.form.on(g.Events.initConsent, t.bind(this));
          e.element.on("form.showMessage", e.scrollToMessage);
        };
        this.activateForm = function (b) {
          q(b && b.firstRun ? null : "open");
          E(!0, b && b.type);
        };
        this.disableForm = function () {
          E(!1);
        };
        this.extractAdditionalData = function () {
          e.fieldNames = [];
          e.form.find("[name]:not([name\x3d''])").each(function () {
            0 > e.fieldNames.indexOf(this.name) &&
              0 > f.indexOf(this.name) &&
              e.fieldNames.push(this.name);
          });
          return { fieldNames: e.fieldNames.join(",") };
        };
        this.displaySuccessMessage = function () {
          e.element.addClass("show-success");
          e.element.trigger("form.showMessage");
        };
        this.cleanForm = function () {
          e.form.trigger(b.CLEAN_UP);
        };
        this.processServerResponse = function (a) {
          a.isSuccessful
            ? (k.push(e.gtmEventData),
              p(),
              z && y(H),
              G && y(b.SUBMIT_WITH_LINKEDIN_AUTOFILL),
              e.displaySuccessMessage(),
              e.onSuccessfulSubmit(a),
              e.cleanForm())
            : (e.activateForm(),
              $.each(e.fieldNames, function (f, l) {
                e.form.trigger(b.VALIDATION + ":" + l, {
                  errors: a.messages[l],
                  self: e,
                });
              }));
        };
        this.processAuthorErrorResponse = function (b) {
          var a = (b = b.responseJSON) && b.messages;
          b =
            a && a.missingRequiredFields && a.missingRequiredFields.length
              ? CQ.I18n.getMessage(
                  "component.form-constructor.required-field-missing.message",
                  [b.messages.missingRequiredFields.join(", ")]
                )
              : a && a.errorMessages && a.errorMessages.length
              ? b.messages.errorMessages.join("\n")
              : e.errorMessage.data("default-message");
          e.errorMessage.text(b);
        };
        this.submitForm = function () {
          e.form.trigger(b.AJAX_START);
          var a = e.extractAdditionalData();
          e.form.ajaxSubmit({
            url: e.actionUrl,
            type: "POST",
            data: a,
            iframe: h.isInternetExplorer(),
            clearForm: !1,
            dataType: "json",
            beforeSend: function () {
              q("close");
            },
            success: function (b) {
              e.processServerResponse(b);
              e.successMessageContainer.one(
                g.Events.transitionEnd,
                function () {
                  e.successSubmitAgain.focus();
                }
              );
              b.isSuccessful &&
                z &&
                (d.hideLinkedinWidget(), d.hideLinkedinWidgetV3());
              z &&
                !d.isTwoStepsForm() &&
                (d.isSecondStep()
                  ? d.initLinkedin("CONVERSION", "CONVERSION")
                  : d.initLinkedin("BUTTON_DATA", "CONVERSION"),
                d.resetApplyWithLinkedin(),
                (B = !1));
            },
            error: function (b) {
              z && (d.hideLinkedinWidget(), d.hideLinkedinWidgetV3());
              e.isAuthor && e.processAuthorErrorResponse(b);
              e.element.addClass("show-error");
              e.element.trigger("form.showMessage");
              e.cleanForm();
              e.errorMessageContainer.one(g.Events.transitionEnd, function () {
                e.errorSubmitAgain.focus();
              });
              z && d.resetApplyWithLinkedin();
              B = !1;
            },
          });
          return !1;
        };
      },
    };
  }
);
define("geolocation", [], function () {
  function h(a) {
    var c = d();
    return function () {
      return (c && c[a]) || "";
    };
  }
  function d() {
    try {
      return m && m.getItem("location");
    } catch (k) {
      return (
        console.warn("ReferenceError: ContextHub is not defined", k),
        { error: k }
      );
    }
  }
  var a = window.ContextHub,
    m = a && a.getStore && a.getStore("geolocation");
  return {
    getData: d,
    getContinent: h("continent"),
    getContinentCode: h("continentCode"),
    getCountry: h("country"),
    getCountryCode: h("countryCode"),
    getRegion: h("region"),
    getRegionCode: h("regionCode"),
    getCity: h("city"),
    getPostalCode: h("postalCode"),
    getLatitude: h("latitude"),
    getLongitude: h("longitude"),
    onGeolocationUpdate: function (a) {
      var c = d();
      if (!c || !c.error)
        if (c)
          setTimeout(function () {
            a(c);
          }, 0);
        else
          m.onUpdate(null, function () {
            a(d());
          });
    },
  };
});
define("HistoryUtil", [], function () {
  function h(a) {
    var d = history.state;
    return d && d[a] ? d[a] : {};
  }
  function d(a, d) {
    var k = {};
    k[a] = $.extend({}, h(a), d);
    return k;
  }
  return {
    push: function (a, h, k) {
      history.pushState(
        $.extend({}, history.state, d(a, h)),
        document.title,
        k || location.href.slice(0, -location.hash.length) || location.href
      );
    },
    getStateByKey: h,
  };
});
define("media", ["utils"], function (h) {
  function d(a, c, d) {
    this.name = a;
    this.start = c;
    this.end = d;
  }
  function a() {
    return h.mq(c.landscape);
  }
  function m() {
    return h.mq(c.portrait);
  }
  function k() {
    return Math.max(
      document.documentElement.clientWidth,
      window.innerWidth || 0
    );
  }
  var c = { landscape: "tablet", portrait: "mobile", none: "none" },
    g = {
      Mobile: new d("mobile", 0, 575),
      WideMobile: new d("wideMobile", 576, 767),
      Tablet: new d("tablet", 768, 991),
      Desktop: new d("desktop", 992, 1129),
      WideDesktop: new d("wideDesktop", 1130, 1339),
      Broad: new d("broad", 1340, Infinity),
    },
    u = Object.keys(g);
  d.prototype.is = function (a) {
    return a instanceof d
      ? this.name === a.name
      : "number" === typeof a
      ? this.start <= a && a <= this.end
      : this.name === a;
  };
  d.prototype.isNot = function (a) {
    return !this.is(a);
  };
  d.prototype.isIn = function (a) {
    return a.some(this.is.bind(this));
  };
  d.prototype.lessThan = function (a) {
    if (a instanceof d) return this.start < a.start;
    if ("string" === typeof a && g[a]) return this.start < g[a].start;
  };
  d.prototype.greaterThan = function (a) {
    if (a instanceof d) return this.start > a.start;
    if ("string" === typeof a && g[a]) return this.start > g[a].start;
  };
  return {
    MediaMode: d,
    modes: g,
    orientation: c,
    currentMode: function () {
      for (var a = k(), c = 0; c < u.length; c++) {
        var d = g[u[c]];
        if (d.is(a)) return d;
      }
    },
    getLandscape: function () {
      return a() ? c.landscape : m() ? c.portrait : c.none;
    },
    isPortrait: m,
    isLandscape: a,
    getViewportWidth: k,
    getViewportHeight: function () {
      return Math.max(
        document.documentElement.clientHeight,
        window.innerHeight || 0
      );
    },
  };
});
define("utils", ["utils-browser"], function (h) {
  function d() {
    var b = document.createElementNS("http://www.w3.org/2000/svg", "svg"),
      a = document.createElementNS("http://www.w3.org/2000/svg", "use");
    b.classList.add("arrow");
    a.setAttributeNS(
      "http://www.w3.org/1999/xlink",
      "xlink:href",
      "/etc/designs/epam-core/images/sprites/sprite-redesign_27.svg#link-arrow"
    );
    b.appendChild(a);
    return b;
  }
  function a(b) {
    return b
      .text()
      .trim()
      .replace(/[^\x20-\x7E]/g, "");
  }
  function m(b, a) {
    2 >= a.length
      ? $(b).each(function () {
          $(this).addClass("text-gradient-s");
        })
      : 3 === a.length &&
        $(b).each(function () {
          $(this).addClass("text-gradient-m");
        });
  }
  function k(a, c) {
    $(a).each(function () {
      $(this).css("background-image", c);
      $(this).addClass("gradient-text");
    });
  }
  function c(a) {
    if (!(a instanceof Element)) throw Error("provide DOM node");
    var b = window.getComputedStyle(a),
      f = b.cssText;
    f ||
      (f = Array.from(b).reduce(function (a, f) {
        return a + f + ":" + b.getPropertyValue(f) + ";";
      }, ""));
    f += " visibility: hidden; z-index: -99999; display: inline;";
    a = a.cloneNode(!0);
    document.querySelector("body").append(a);
    a.style.cssText = f;
    return a;
  }
  function g(a, d) {
    a = c(a[0]);
    a.textContent = d.slice(-2);
    d = a.offsetWidth;
    a.remove();
    return d;
  }
  function u(a) {
    a.each(function () {
      $(this).removeClass("text-gradient-s text-gradient-m");
      $(this).removeAttr("style");
      u($(this).children());
    });
  }
  function r() {
    var a = document.createElement("span");
    document.querySelector("body").appendChild(a);
    a.classList.add(t.RTE_TEXT_GRADIENT);
    w =
      /(?<left>rgb\([0-9, ]+\)).+?(?<middle>rgb\([0-9, ]+\)).+?(?<right>rgb\([0-9, ]+\))/.exec(
        getComputedStyle(a).backgroundImage
      ).groups;
    a.remove();
  }
  function n(a) {
    var b = a.width;
    return (
      "linear-gradient(to left, " +
      a.rightColor +
      " " +
      b * a.rightRatio +
      "px, " +
      a.middleColor +
      " " +
      b * a.middleRatio +
      "px, " +
      a.leftColor +
      " 100%)"
    );
  }
  function p(a) {
    if (!(a && a.parentNode && a.allNodesSelector && a.overridenNodesSelector))
      return {};
    var b = a.overridenNodesSelector;
    a = Array.from(a.parentNode.querySelectorAll(a.allNodesSelector));
    var f = Array.from(document.querySelectorAll(b)),
      c = a.filter(function (a) {
        return f.includes(a);
      });
    return {
      normalNodes: a.filter(function (a) {
        return !c.includes(a);
      }),
      overridenNodes: c,
    };
  }
  var q = $(window),
    t = { TRANSPARENT: "transparent", RTE_TEXT_GRADIENT: "rte-text-gradient" },
    w = {};
  return {
    mq: function (a) {
      if (!a || "string" !== typeof a)
        throw Error("Invalid media query. Please provide a valid string.");
      return window.matchMedia(a).matches;
    },
    hasTouchEvents: function () {
      return (
        "ontouchstart" in window ||
        0 < navigator.maxTouchPoints ||
        0 < navigator.msMaxTouchPoints
      );
    },
    checkDividers: function (a, c) {
      function b() {
        var b = null;
        a.each(function (a, f) {
          b && $(f).toggleClass(c, !$.isOffsetEqual([b, f]));
          b = f;
        });
      }
      q.on("resize", b);
      $.onFontLoad(b);
    },
    debounce: function (a, c) {
      var b;
      return function () {
        b ||
          (a.apply(this, arguments),
          (b = !0),
          setTimeout(function () {
            b = !1;
          }, c));
      };
    },
    getQueryParameters: function (a) {
      var b = {};
      if (a) {
        var f = a.indexOf("?");
        0 <= f &&
          ((a = a.substr(f + 1).split("\x26")),
          $.each(a, function (a, f) {
            a = f.split("\x3d");
            f = a[1];
            b[a[0]] = f ? decodeURIComponent(f.replace(/\+/g, " ")) : f;
          }));
      }
      return b;
    },
    updateStagePosition: function (a, c) {
      return function (b) {
        var f = parseInt(a.css("transform").split(",")[4]),
          d = c.width();
        b -= d;
        -f > b && a.css("transform", "translateX(-" + b + "px)");
      };
    },
    addExtensionToPhoneNumber: function (a) {
      var b = h.isAndroid(),
        f = h.isIOS(),
        c = h.isWindows();
      a = a.find("a[data-extension]");
      if (c || b || f) {
        if (c || b) var d = ";ext\x3d";
        f && (d = ",%23%,");
        a.each(function () {
          var a = $(this),
            b = a.attr("href"),
            f = a.data("extension");
          b &&
            f &&
            ((b = DOMPurify.sanitize(b)),
            (f = DOMPurify.sanitize(f)),
            a.attr("href", b + d + f));
        });
      }
    },
    debounceExtend: function (a, c, f) {
      var b;
      return function () {
        var d = this,
          l = arguments,
          g = f && !b;
        clearTimeout(b);
        b = setTimeout(function () {
          b = null;
          f || a.apply(d, l);
        }, c);
        g && a.apply(d, l);
      };
    },
    isElementInViewport: function (a, c) {
      a = a.getBoundingClientRect();
      var b = a.top,
        d = a.bottom;
      c && ((b = a.top + c), (d = a.bottom + c));
      return (
        (0 >= b && 0 <= d) ||
        (d >= (window.innerHeight || document.documentElement.clientHeight) &&
          b <= (window.innerHeight || document.documentElement.clientHeight)) ||
        (0 <= b &&
          d <= (window.innerHeight || document.documentElement.clientHeight))
      );
    },
    loadLottieFile: function (a) {
      return bodymovin.loadAnimation({
        container: a.container,
        renderer: "svg",
        loop: a.loop,
        autoplay: a.autoplay,
        path: a.path,
        rendererSettings: a.rendererSettings,
      });
    },
    applyShadowOnImage: function (a, c, f) {
      a = a.data("shadow-opacity");
      if (0 < a && 0 === $(c[0]).find(".image-shadow-block").length) {
        a = "rgba(0,0,0," + a / 100 + ")";
        for (var b = 0; b < c.length; b++) {
          var d = a;
          var g = document.createElement("div");
          g.style.backgroundColor = d;
          g.classList.add("image-shadow-block");
          d = g;
          f && d.classList.add("parallax-scale");
          c[b].after(d);
        }
      }
    },
    redirectToPageAnchor: function () {
      $('a[href*\x3d"#"]:not([href\x3d"#"]):not([href*\x3d"\x3d"])').click(
        function () {
          if (
            !$(this).hasClass("a11y-skip") &&
            location.pathname.replace(/^\//, "") ===
              this.pathname.replace(/^\//, "") &&
            location.hostname === this.hostname
          ) {
            var a = $(this.hash);
            a = a.length ? a : $("[name\x3d" + this.hash.slice(1) + "]");
            if (a.length)
              return (
                $("html, body").animate({ scrollTop: a.offset().top }, 0), !1
              );
          }
        }
      );
    },
    insertArrowForLinks: function (a) {
      a = $(a).find(".bold-underlined-hover");
      for (var b = 0; b < a.length; b++) {
        var f = $(a[b]);
        f.hasClass("add-arrow") &&
          !f.has(".arrow").length &&
          ((f = document.createElement("span")),
          f.classList.add("arrow"),
          a[b].append(f));
      }
    },
    insertArrowPictureForLinks: function (a) {
      a = $(a).find(".bold-underlined-hover");
      for (var b = 0; b < a.length; b++) {
        var f = $(a[b]);
        if (f.hasClass("add-arrow") && !f.has(".arrow").length) {
          f = f.has("span").length ? f.find("span").slice(-1) : a[b];
          var c = d();
          f.append(c);
        }
      }
    },
    setHorizontalScrolling: function (a, c, f, d) {
      function b(a) {
        if (l && a.wheelDeltaY)
          return a.preventDefault(), a.stopPropagation(), !1;
      }
      var l = !1,
        g = !1;
      f = f || 100;
      d = d || 2.5;
      c.mouseenter(function () {
        a.context.offsetWidth < a.context.scrollWidth &&
          ((l = !0),
          document.body.addEventListener("wheel", b, { passive: !1 }),
          (g = !0));
      });
      c.mouseleave(function () {
        l = !1;
        g &&
          (document.body.removeEventListener("wheel", b, { passive: !1 }),
          (g = !1));
      });
      a.mousewheel(function (b) {
        if (l) {
          b = b.originalEvent;
          var c = Math.abs(b.deltaY);
          b = (c >= f ? c / d : c) * Math.sign(b.deltaY || 0);
          c = a.scrollLeft();
          a.scrollLeft(c + b);
        }
      });
    },
    insertArrowPicture: function (a) {
      var b = d();
      a.append(b);
    },
    getNodeText: a,
    applySimpleGradient: m,
    applyDynamicGradient: k,
    createGradient: function (a) {
      var b = a.width;
      return (
        "linear-gradient(to left, var(--gradient-color-right) " +
        b * a.rightRatio +
        "px,  var(--gradient-color-middle) " +
        b * a.middleRatio +
        "px, var(--gradient-color-left) 100%)"
      );
    },
    getLast2CharsWidth: g,
    clearGradients: u,
    createCloneWithStyles: c,
    createRTEGradient: n,
    initRTEGradients: function (b) {
      r();
      b.find("." + t.RTE_TEXT_GRADIENT).each(function () {
        var b = $(this),
          f;
        for (f = b; f.children().length; ) f = f.children();
        var c = a(f);
        3 >= c.length
          ? m(b, c)
          : ((c = {
              width: g(f, c),
              rightRatio: 0.5,
              middleRatio: 1.4,
              leftColor: w.left,
              middleColor: w.middle,
              rightColor: w.right,
            }),
            (c = n(c)),
            k([f], c));
        b.removeClass(t.transparent);
      });
    },
    applyTextGradients: function (a) {
      var b = p({
          parentNode: this.$el[0],
          allNodesSelector: a.allNodesSelector,
          overridenNodesSelector: a.overridenNodesSelector,
        }),
        c = b.normalNodes;
      if ("true" === document.body.dataset.modeSwitcher) {
        var d = Array.from(
            document.querySelectorAll(a.alwaysDarkNodesSelector)
          ),
          g = c.filter(function (a) {
            return d.includes(a);
          }),
          k = [];
        g = g.filter(function (a) {
          var b = a.closest(".single-slide-ui").querySelectorAll("video");
          if (1 < b.length && b[0].dataset.srcLightVideo) {
            if (!b[0].dataset.srcDarkVideo) return k.push(a), !1;
            if (b[0].dataset.srcDarkVideo !== b[0].dataset.srcLightVideo)
              return !1;
          }
          return !0;
        });
        c = c.filter(function (a) {
          return !g.includes(a) && !k.includes(a);
        });
        k.length &&
          a.alwaysLightGradientText.init(k, {
            rte: !0,
            modeOverride: a.lightMode,
            rightRatio: 0.5,
            middleRatio: 1.4,
          });
        g.length &&
          a.alwaysDarkGradientText.init(g, {
            rte: !0,
            modeOverride: a.darkMode,
            rightRatio: 0.5,
            middleRatio: 1.4,
          });
      }
      a.gradientText.init(c, { rte: !0, rightRatio: 0.5, middleRatio: 1.4 });
      a.ecModeGradientText.init(b.overridenNodes, {
        rte: !0,
        modeOverride: a.ecMode,
        rightRatio: 0.5,
        middleRatio: 1.4,
      });
    },
    applyMultiLineGradient: function (a) {
      if (a) {
        a.style.display = "inline";
        for (
          var b = a.getBoundingClientRect().y,
            c = getComputedStyle(a).getPropertyValue("--form-submit-gradient"),
            d = a.getClientRects(),
            g = "",
            k = 0;
          k < d.length;
          k++
        )
          g +=
            c +
            " 0 " +
            Math.floor(d[k].y - b) +
            "px / " +
            d[k].width +
            "px " +
            Math.ceil(d[k].height) +
            "px no-repeat, ";
        a.style.display = "inline-block";
        a.style.background = g.slice(0, -2);
        a.style.backgroundClip = "text";
        a.style.webkitBackgroundClip = "text";
      }
    },
    selectNormalAndOverriden: p,
    isRedesign23: function () {
      var a = $("body");
      return a.hasClass("dark-mode") || a.hasClass("light-mode");
    },
  };
});
define("utils-share", [], function () {
  var h = { image: "", text: "" },
    d = {
      fb: "Facebook.com",
      tw: "Twitter.com",
      li: "LinkedIn.com",
      vk: "vk.com",
    };
  return {
    go: function (a) {
      this[a.type] && this.openPopup(this.getLink(a));
    },
    getLink: function (a) {
      a = $.extend(
        {},
        h,
        {
          url: location.href,
          count_url: location.href,
          share_title: document.title,
        },
        a
      );
      a.utmContent &&
        (a.url =
          a.url +
          (-1 < a.url.indexOf("?") ? "\x26" : "?") +
          ("utm_source\x3d" +
            d[a.type] +
            "\x26utm_medium\x3dshared_job_post\x26utm_campaign\x3dshare_job_post\x26utm_content\x3d" +
            a.utmContent));
      return this[a.type](a);
    },
    openPopup: function (a) {
      var d = window.open(
        "",
        "",
        "toolbar\x3d0,status\x3d0,scrollbars\x3d1,width\x3d626,height\x3d436"
      );
      d ? (d.document.location = a) : (location.href = a);
    },
    fb: function (a) {
      return (
        "http://www.facebook.com/sharer/sharer.php?u\x3d" +
        encodeURIComponent(a.url)
      );
    },
    tw: function (a) {
      return (
        "http://twitter.com/share?text\x3d" +
        encodeURIComponent(a.share_title) +
        "\x26url\x3d" +
        encodeURIComponent(a.url) +
        "\x26counturl\x3d" +
        encodeURIComponent(a.count_url)
      );
    },
    li: function (a) {
      return (
        "http://www.linkedin.com/shareArticle?url\x3d" +
        encodeURIComponent(a.url) +
        "\x26title\x3d" +
        encodeURIComponent(a.share_title) +
        "\x26summary\x3d" +
        encodeURIComponent(a.text)
      );
    },
    vk: function (a) {
      return (
        "http://vk.com/share.php?url\x3d" +
        encodeURIComponent(a.url) +
        "\x26title\x3d" +
        encodeURIComponent(a.share_title) +
        "\x26description\x3d" +
        encodeURIComponent(a.text) +
        "\x26image\x3d" +
        encodeURIComponent(a.image)
      );
    },
  };
});
define("utils-dust", [], function () {
  function h(d, a, h) {
    window.dust.render(d, a, function (a, c) {
      a ? console.error(a) : h(c);
    });
  }
  return {
    render: h,
    append: function (d, a, m) {
      h(d, a, function (a) {
        m.append(a);
      });
    },
    jQueryFunc: function (d, a, m, k) {
      h(d, a, function (a) {
        k.call(m, a);
      });
    },
  };
});
define("utils-browser", [], function () {
  var h = (function () {
      var a;
      return function () {
        if ("undefined" === typeof a) {
          var c = window.navigator.userAgent,
            d = c.indexOf("MSIE ");
          0 < d
            ? (a = parseInt(c.substring(d + 5, c.indexOf(".", d)), 10))
            : 0 < c.indexOf("Trident/")
            ? ((d = c.indexOf("rv:")),
              (a = parseInt(c.substring(d + 3, c.indexOf(".", d)), 10)))
            : ((d = c.indexOf("Edge/")),
              (a =
                0 < d
                  ? parseInt(c.substring(d + 5, c.indexOf(".", d)), 10)
                  : !1));
        }
        return a;
      };
    })(),
    d = (function () {
      var a;
      return function () {
        "undefined" === typeof a &&
          (a =
            0 <= window.navigator.userAgent.toLowerCase().indexOf("android"));
        return a;
      };
    })(),
    a = (function () {
      var a;
      return function () {
        "undefined" === typeof a &&
          (a = !!window.navigator.userAgent.match(/(iPad|iPhone|iPod)/g));
        return a;
      };
    })(),
    m = (function () {
      var a;
      return function () {
        "undefined" === typeof a &&
          (a = null !== navigator.userAgent.match(/iPad/i));
        return a;
      };
    })(),
    k = (function () {
      var a;
      return function () {
        "undefined" === typeof a &&
          (a = -1 < navigator.platform.indexOf("Win"));
        return a;
      };
    })(),
    c = (function () {
      var a;
      return function () {
        "undefined" === typeof a &&
          (a = "ontouchstart" in window || navigator.msMaxTouchPoints);
        return a;
      };
    })();
  return {
    isInternetExplorer: h,
    isAndroid: d,
    isIOS: a,
    isWindows: k,
    isIPad: m,
    detectIOSDevice: function () {
      return (
        "iPad Simulator;iPhone Simulator;iPod Simulator;iPad;iPhone;iPod"
          .split(";")
          .includes(navigator.platform) ||
        (navigator.userAgent.includes("Mac") && "ontouchend" in document)
      );
    },
    isSafari: function () {
      var a = navigator.userAgent;
      return !(-1 < a.indexOf("Chrome")) && -1 < a.indexOf("Safari");
    },
    isTouchDevice: c,
  };
});
define("utils-env", ["utils"], function (h) {
  function d() {
    return "disabled" === h.getQueryParameters(location.href).wcmmode;
  }
  return {
    isAuthor: function () {
      return !!N & DS.authorRunMode;
    },
    isEditMode: function () {
      return (
        this.isAuthor() &&
        !d() &&
        !!Granite.author &&
        "edit" === $.cookie("wcmmode")
      );
    },
    isPreviewMode: function () {
      return (
        this.isAuthor() &&
        !d() &&
        !!Granite.author &&
        "preview" === $.cookie("wcmmode")
      );
    },
    isDisabledMode: d,
  };
});
define("utils-a11y", ["constants"], function (h) {
  return {
    handlePopupFocus: function (d) {
      d = d
        .find("input, textarea, select, a, button")
        .filter(":visible")
        .filter(function () {
          return $(this).attr("tabindex")
            ? 0 <= $(this).attr("tabindex")
            : $(this);
        });
      var a = d.first(),
        m = d.last();
      d.off("keydown");
      a.focus();
      m.on("keydown", function (d) {
        d.key !== h.Keys.tab || d.shiftKey || (d.preventDefault(), a.focus());
      });
      a.on("keydown", function (a) {
        a.key === h.Keys.tab && a.shiftKey && (a.preventDefault(), m.focus());
      });
    },
  };
});
define("utm-utils", ["constants", "utils"], function (h, d) {
  function a(a) {
    var c = document.createElement("a");
    c.setAttribute("href", DOMPurify.sanitize(a));
    return c.hostname;
  }
  function m(a) {
    var c = !1;
    k.forEach(function (d) {
      a.hasOwnProperty(d) && (c = !0);
    });
    return c;
  }
  var k = ["utmTerm", "utmSource", "utmMedium", "utmCampaign", "utmContent"];
  return {
    isSessionOutdated: function () {
      var a;
      if ((a = sessionStorage.getItem(h.StorageKey.utmParameters))) {
        a = JSON.parse(a);
        var d = new Date();
        a = new Date(a.timestamp);
        a.setMinutes(a.getMinutes() + 30);
        if (d.getTime() > a.getTime()) return !0;
      }
      return !1;
    },
    buildAnywhereUrl: function (c) {
      var g = sessionStorage.getItem(h.StorageKey.utmParameters),
        k = c,
        r = a(window.location.href);
      0 === Object.keys(d.getQueryParameters(c)).length
        ? (k += "?")
        : (k += "\x26");
      if (!g)
        return (
          k +
          "utm_medium\x3d" +
          r +
          "\x26utm_term\x3d" +
          r +
          "\x26utm_source\x3d" +
          r
        );
      g = JSON.parse(g);
      c = m(g);
      var n = a(g.userReferrer);
      c
        ? (k +=
            "utm_medium\x3d" +
            r +
            (g.hasOwnProperty("utmTerm")
              ? "\x26utm_term\x3d" + g.utmTerm
              : "") +
            (g.hasOwnProperty("utmSource")
              ? "\x26utm_source\x3d" + g.utmSource
              : "") +
            (g.hasOwnProperty("utmCampaign")
              ? "\x26utm_campaign\x3d" + g.utmCampaign
              : "") +
            (g.hasOwnProperty("utmContent")
              ? "\x26utm_content\x3d" + g.utmContent
              : ""))
        : !c && g.startPageIsVacancy
        ? (k +=
            "utm_medium\x3d" +
            r +
            "\x26utm_term\x3d" +
            r +
            (n ? "\x26utm_source\x3d" + n : "") +
            (n ? "\x26utm_content\x3dreferrer_" + n : ""))
        : c ||
          g.startPageIsVacancy ||
          (k +=
            "utm_medium\x3d" +
            r +
            "\x26utm_term\x3d" +
            r +
            "\x26utm_source\x3d" +
            r +
            (n ? "\x26utm_content\x3dreferrer_" + n : ""));
      return k;
    },
    getFullDomain: a,
    isSessionHasUtmParameters: m,
  };
});
define("utm", ["utils", "constants", "utm-utils"], function (h, d, a) {
  function m() {
    if (g) return g;
    g = this;
    this.referrer = document.referrer;
    this.hasExternalReferrer =
      0 < this.referrer.length &&
      -1 === this.referrer.split("/")[2].indexOf("epam");
    this.queryParameters = h.getQueryParameters(window.location.href);
    this.utmParameters = {};
    this.shouldSessionUpdate = !1;
    this.$applyForm = $(c.applyForm);
    this.isMarketingLandingPage = $('#main[data-marketing\x3d"true"]').length;
    this.initComponent();
  }
  var k = [
      "utm_term",
      "utm_source",
      "utm_medium",
      "utm_campaign",
      "utm_content",
    ],
    c = { applyForm: ".form-apply-for-job", vacancyPage: ".vacancy-page" },
    g,
    u = a.getFullDomain(window.location.href);
  m.prototype.initComponent = function () {
    a.isSessionOutdated() && this.removeSession();
    this.queryParameters && this.getUtmParameters();
    this.shouldSessionUpdate && this.createSession();
    this.$applyForm &&
      this.$applyForm.on(
        "AJAX_START",
        function () {
          this.updateHiddenFields();
        }.bind(this)
      );
  };
  m.prototype.getUtmParameters = function () {
    k.forEach(
      function (a) {
        if (this.queryParameters.hasOwnProperty(a)) {
          var c = a.split("_");
          c = c[0] + c[1][0].toUpperCase() + c[1].slice(1);
          this.utmParameters[c] = this.queryParameters[a];
        }
      }.bind(this)
    );
    !this.isMarketingLandingPage ||
    Object.keys(this.utmParameters).length ||
    (!this.hasExternalReferrer && this.referrer)
      ? this.hasExternalReferrer &&
        ((this.utmParameters.userReferrer = this.referrer),
        (this.utmParameters.startPageIsVacancy = !!$(c.vacancyPage).length))
      : (this.utmParameters.utmSource = "N & DSLandingPage");
    this.shouldSessionUpdate = 0 < Object.keys(this.utmParameters).length;
  };
  m.prototype.createSession = function () {
    this.utmParameters.timestamp = new Date();
    sessionStorage.setItem(
      d.StorageKey.utmParameters,
      JSON.stringify(this.utmParameters)
    );
  };
  m.prototype.removeSession = function () {
    sessionStorage.removeItem(d.StorageKey.utmParameters);
  };
  m.prototype.updateHiddenFields = function () {
    function c(a) {
      "utmCampaign" === a.name
        ? (a.value = null)
        : h[a.name] && (a.value = h[a.name]);
    }
    var g = JSON.parse(sessionStorage.getItem(d.StorageKey.utmParameters)),
      k = this.$applyForm.find('input[type\x3d"hidden"]'),
      h = { utmSource: u, utmMedium: u, utmTerm: u };
    if (g) {
      var m = a.isSessionHasUtmParameters(g);
      h.utmContent = "referrer_" + a.getFullDomain(g.userReferrer);
      !m && g.startPageIsVacancy
        ? ((h.utmSource = a.getFullDomain(g.userReferrer)),
          k.each(function (a, b) {
            c(b);
          }))
        : m || g.startPageIsVacancy
        ? m &&
          k.each(function (a, b) {
            "utmMedium" === b.name
              ? g[b.name]
                ? (b.value = g[b.name])
                : (b.value = u)
              : g[b.name] && (b.value = g[b.name]);
          })
        : k.each(function (a, b) {
            c(b);
          });
    } else
      k.each(function (a, b) {
        "utmContent" === b.name ? (b.value = null) : c(b);
      });
  };
  m.moduleName = "utm";
  return m;
});
define("animations", ["utils-env"], function (h) {
  function d(a) {
    var d = a[a.length - 1];
    a = a[0].getBoundingClientRect();
    a = a.y + a.height / 2;
    d = d.getBoundingClientRect();
    d = d.y + d.height / 2;
    return a <= window.innerHeight && 0 <= d ? !0 : !1;
  }
  return {
    addAppearanceAnimation: function (a, h) {
      function k() {
        d(a) && (c(a, h), window.removeEventListener("scroll", k));
      }
      function c() {
        function c(a) {
          a.classList.add(h);
        }
        for (var d = 0; d < a.length; d++) setTimeout(c, 150 * d, a[d]);
      }
      if (!a || !h)
        throw Error("addAppearanceAnimation is missing required params");
      window.removeEventListener("scroll", k);
      d(a) ? c(a, h) : window.addEventListener("scroll", k);
    },
    disableAnimationInEditMode: function (a, d) {
      h.isEditMode() &&
        a.forEach(function (a) {
          a.classList.add(d);
        });
    },
  };
});
define("gradients", ["constants", "utils"], function (h, d) {
  function a() {
    this.startTimestamp = null;
    this.currentStep = 1;
    this.timeDelta = 30;
    this.domNodesList = [];
    this.params = {};
    this.targetGradientChannels = this.currentGradientChannels = null;
    this.gradientParams = [];
    this.currentTheme = "";
    this.hexGradientColors =
      this.bindedApplyGradientAnimated =
      this.debouncedBindedApplyGradientImmediately =
        null;
  }
  function m(a) {
    if (!a.children.length)
      return a.textContent.trim().replace(/[^\x20-\x7E]/g, "");
    for (var b = !1, c = 0; c < a.childNodes.length; c++)
      "BR" === a.childNodes[c].tagName && (b = !0);
    if (b)
      return a.innerHTML
        .replace(/<br\s*[\/]?>/gi, " ")
        .trim()
        .replace(/[^\x20-\x7E]/g, "");
    b = "";
    for (c = 0; c < a.children.length; c++) b += m(a.children[c]) + " ";
    return (b = b.slice(0, -1));
  }
  function k(a) {
    if (!(a instanceof Element)) throw Error("provide DOM node");
    var b = window.getComputedStyle(a),
      c = b.cssText;
    c ||
      (c = Array.from(b).reduce(function (a, c) {
        return a + c + ":" + b.getPropertyValue(c) + ";";
      }, ""));
    c += " visibility: hidden; z-index: -99999; display: inline;";
    a = a.cloneNode(!0);
    document.querySelector("body").append(a);
    a.style.cssText = c;
    return a;
  }
  function c(a) {
    var b = {};
    a &&
      Object.keys(a).forEach(function (c) {
        var d = parseInt(a[c].slice(0, 2), 16),
          f = parseInt(a[c].slice(2, 4), 16),
          g = parseInt(a[c].slice(4, 6), 16);
        b[c] = { c1: d, c2: f, c3: g };
      });
    return b;
  }
  function g(a) {
    return "rgb(" + a.c1 + "," + a.c2 + "," + a.c3 + ")";
  }
  function u(a) {
    var b = a.current,
      c = a.target,
      d = a.progress,
      f = {};
    Object.keys(b).forEach(function (a) {
      f[a] = {};
      Object.keys(b[a]).forEach(function (g) {
        f[a][g] = Math.round(b[a][g] + (c[a][g] - b[a][g]) * d);
      });
    });
    return f;
  }
  function r(a) {
    for (; a.children.length && "BR" !== a.children[0].nodeName; )
      a = a.children[0];
    return a;
  }
  var n = {
      GRADIENT_TEXT: "gradient-text",
      TRANSPARENT: "transparent",
      RTE_TEXT_GRADIENT: "rte-text-gradient",
    },
    p = {
      AI_WAVES: "--ai-dark-waves-gradient",
      AI_BUBBLES: "--ai-light-bubbles-gradient",
      AI_GRADIENT: "--ai-dark-gradient-gradient",
      AI_STREAM: "--ai-light-stream",
      AI_GLASS: "--ai-dark-glass",
    },
    q = {
      DARK: "--epam-rte-text-gradient-dark",
      LIGHT: "--epam-rte-text-gradient-light",
      EC: "--epam-rte-text-gradient-ec",
    },
    t = { rightRatio: 0.1, middleRatio: 1.2, rte: !1 },
    w = {
      AI_WAVES: "ai-dark-waves-theme",
      AI_BUBBLES: "ai-light-bubbles-theme",
      AI_GRADIENT: "ai-dark-gradient-theme",
      AI_STREAM: "ai-light-stream-theme",
      AI_GLASS: "ai-dark-glass-theme",
    },
    b = { DARK: "dark-mode", LIGHT: "light-mode", EC: "ec-mode" };
  document.body.classList.contains("ai-report-page") &&
    (Object.assign(b, w), Object.assign(q, p));
  var v = {
    AI_WAVES: { SMALL: [15, 50, 90], MEDIUM: [15, 60, 100] },
    AI_BUBBLES: { SMALL: [15, 50, 90], MEDIUM: [15, 60, 100] },
    AI_GRADIENT: { SMALL: [15, 50, 90], MEDIUM: [15, 60, 100] },
    AI_STREAM: { SMALL: [15, 50, 90], MEDIUM: [15, 60, 100] },
    AI_GLASS: { SMALL: [15, 50, 90], MEDIUM: [15, 60, 100] },
    DARK: { SMALL: [15, 50, 90], MEDIUM: [15, 60, 95] },
    LIGHT: { SMALL: [15, 50, 90], MEDIUM: [15, 60, 95] },
    EC: { SMALL: [15, 85, 100], MEDIUM: [15, 95, 100] },
  };
  a.prototype.init = function (a, b) {
    if (a) {
      this.domNodesList = a;
      this.params = Object.assign({}, t, b);
      this.params.modeOverride
        ? (this.currentTheme = this.params.modeOverride)
        : this.getCurrentTheme();
      this.getGradientColors();
      this.currentGradientChannels = c(
        this.hexGradientColors[this.currentTheme]
      );
      if (b.rte) {
        a = [];
        for (b = 0; b < this.domNodesList.length; b++)
          a[b] = r(this.domNodesList[b]);
        this.domNodesList = a;
      }
      this.applyGradientImmediately();
      var f = this.applyGradientImmediately.bind(this),
        g = window.innerWidth;
      this.debouncedBindedApplyGradientImmediately = function () {
        window.innerWidth !== g &&
          ((g = window.innerWidth), d.debounceExtend(f, 300));
      };
      d.debounceExtend(f, 300);
      window.addEventListener(
        "resize",
        this.debouncedBindedApplyGradientImmediately.bind(this)
      );
      this.params.modeOverride ||
        ((this.bindedApplyGradientAnimated =
          this.applyGradientAnimated.bind(this)),
        document.body.addEventListener(
          h.Events.themeSwitch,
          this.bindedApplyGradientAnimated
        ));
    } else console.error("applyGradient: Provide nodes list");
  };
  a.prototype.lightInit = function (a, b) {
    a
      ? ((this.domNodesList = a),
        (this.params = Object.assign({}, t, b)),
        this.params.modeOverride
          ? (this.currentTheme = this.params.modeOverride)
          : this.getCurrentTheme(),
        this.getGradientColors(),
        (this.currentGradientChannels = c(
          this.hexGradientColors[this.currentTheme]
        )),
        this.applyGradientImmediately(),
        this.params.modeOverride ||
          ((this.bindedApplyGradientAnimated =
            this.applyGradientAnimated.bind(this)),
          document.body.addEventListener(
            h.Events.themeSwitch,
            this.bindedApplyGradientAnimated
          )))
      : console.error("applyGradient: Provide nodes list");
  };
  a.prototype.applyGradientImmediately = function () {
    for (var a = 0; a < this.domNodesList.length; a++) {
      var b = this.domNodesList[a],
        c = m(b),
        d = this.gradientParams,
        g = a,
        h = c,
        w = k(b);
      w.textContent = h.slice(-2);
      h = w.offsetWidth;
      w.remove();
      d[g] = {
        width: h,
        rightRatio: this.params.rightRatio,
        middleRatio: this.params.middleRatio,
        textLength: c.length,
      };
      c = this.createGradient({
        nodeIndex: a,
        gradientChannels: this.currentGradientChannels,
      });
      d = b;
      d.style.backgroundImage = c;
      d.classList.add(n.GRADIENT_TEXT);
      b.classList.remove(n.TRANSPARENT);
    }
  };
  a.prototype.applyGradientAnimated = function () {
    this.currentStep = 1;
    this.startTimestamp = null;
    this.getCurrentTheme();
    this.targetGradientChannels = c(this.hexGradientColors[this.currentTheme]);
    window.requestAnimationFrame(this.render.bind(this));
  };
  a.prototype.render = function (a) {
    this.startTimestamp || (this.startTimestamp = a);
    if (a - this.startTimestamp < this.currentStep * this.timeDelta)
      window.requestAnimationFrame(this.render.bind(this));
    else {
      a = u({
        current: this.currentGradientChannels,
        target: this.targetGradientChannels,
        progress: this.currentStep / 10,
      });
      for (var b = 0; b < this.domNodesList.length; b++) {
        var c = this.createGradient({ nodeIndex: b, gradientChannels: a }),
          d = this.domNodesList[b];
        d.style.backgroundImage = c;
        d.classList.add(n.GRADIENT_TEXT);
      }
      10 > this.currentStep
        ? (this.currentStep++,
          window.requestAnimationFrame(this.render.bind(this)))
        : (this.currentGradientChannels = this.targetGradientChannels);
    }
  };
  a.prototype.createGradient = function (a) {
    var b = a.nodeIndex;
    a = a.gradientChannels;
    var c = this.gradientParams[b].textLength;
    if (3 >= c)
      return (
        (b = 2 >= c ? v[this.currentTheme].SMALL : v[this.currentTheme].MEDIUM),
        "linear-gradient(to right, " +
          g(a.left) +
          " " +
          b[0] +
          "%, " +
          g(a.middle) +
          " " +
          b[1] +
          "%, " +
          g(a.right) +
          " " +
          b[2] +
          "%)"
      );
    c = this.gradientParams[b].width;
    var d = this.gradientParams[b].rightRatio;
    b = this.gradientParams[b].middleRatio;
    return (
      "linear-gradient(to left, " +
      g(a.right) +
      " " +
      c * d +
      "px, " +
      g(a.middle) +
      " " +
      c * b +
      "px, " +
      g(a.left) +
      " 100%)"
    );
  };
  a.prototype.stop = function () {
    window.removeEventListener(
      "resize",
      this.debouncedBindedApplyGradientImmediately
    );
    document.body.removeEventListener(
      h.Events.themeSwitch,
      this.bindedApplyGradientAnimated
    );
    this.clearGradients();
  };
  a.prototype.clearGradients = function () {
    for (var a = 0; a < this.domNodesList.length; a++)
      this.domNodesList[a].classList.remove(n.GRADIENT_TEXT),
        this.domNodesList[a].style.removeProperty("background-image");
  };
  a.prototype.getCurrentTheme = function () {
    Object.keys(b).forEach(
      function (a) {
        document.body.classList.contains(b[a]) && (this.currentTheme = a);
      }.bind(this)
    );
  };
  a.prototype.getGradientColors = function () {
    var a = {},
      b = document.createElement("span");
    document.querySelector("body").appendChild(b);
    var c = /#(?<left>\w+).+#(?<middle>\w+).+#(?<right>\w+)/;
    Object.keys(q).forEach(function (d) {
      var f = getComputedStyle(b).getPropertyValue(q[d]);
      f = c.exec(f).groups;
      a[d] = f;
    });
    this.hexGradientColors = a;
    b.remove();
  };
  return {
    GradientText: a,
    modes: { DARK: "DARK", LIGHT: "LIGHT", EC: "EC" },
    classes: n,
  };
});
(function () {
  var h = $(window);
  Array.prototype.find ||
    (Array.prototype.find = function (d, a) {
      if (null === this)
        throw new TypeError("Array.prototype.find called on null or undefined");
      if ("function" !== typeof d)
        throw new TypeError("predicate must be a function");
      for (var h = Object(this), k = h.length >>> 0, c, g = 0; g < k; g++)
        if (((c = h[g]), d.call(a, c, g, h))) return c;
    });
  h.onbeforeprint ||
    window.matchMedia("print").addListener(function (d) {
      d.matches && h.trigger("beforeprint");
    });
})();
define("imager", [], function () {
  function h(h, k) {
    k = $.extend({}, a, k);
    k.className = k.className ? k.className + " imager-ready" : "imager-ready";
    d.push(new window.Imager(h, k));
    return d[d.length - 1];
  }
  var d = [],
    a = {
      cssBackground: !1,
      availableWidths: [
        300, 320, 400, 480, 600, 640, 768, 960, 990, 1248, 1920,
      ],
      widthInterpolator: function (a) {
        return "resize_w_" + a;
      },
    };
  $(document).ready(function () {
    h(".delayed-image-load-section-background", {
      cssBackground: !0,
      availableWidths: [990, 1248, 1920],
    });
  });
  return {
    create: h,
    instances: d,
    classes: { placeholder: "imager-placeholder", ready: "imager-ready" },
  };
});
define([
  "require",
  "utils-browser",
  "constants",
  "utm",
  "jquery-plugins",
], function (h, d, a, m) {
  function k() {
    var a = window.N & DS.mods;
    if (!a || !a.length) throw "Active modules list is undefined.";
    return a;
  }
  function c(a, b) {
    return function () {
      var c = new b($(this));
      b.moduleName && console.log("Component: " + b.moduleName);
      p[a].push(c);
    };
  }
  function g(a, b) {
    if (!b) throw 'Component "' + a + '" is undefined.';
    p[a] || (p[a] = []);
  }
  function u(a) {
    var b = h(a);
    g(a, b);
    $(b.selector).each(c(a, b));
  }
  function r(a, b) {
    b.data
      .map(function (a) {
        return a.key;
      })
      .forEach(function (a) {
        $("#" + a + " [data-component]").each(function () {
          var a = $(this).data("component"),
            b = h(a);
          g(a, b);
          c(a, b).call(this);
        });
      });
    svg4everybody();
  }
  window.intersectionObserverTracker =
    window.intersectionObserverTracker ||
    (function () {
      var a = [];
      return Object.freeze({
        addInfo: function (b) {
          a.push(b);
        },
        logObservers: function () {
          console.table(a);
        },
        getObserverCount: function () {
          return a.length;
        },
        clear: function () {
          a.length = 0;
        },
      });
    })();
  var n = $("html"),
    p = [];
  $(function () {
    var a = window.ContextHub;
    k().forEach(u);
    define("N & DS.components", [], function () {
      return p;
    });
    a && a.eventing && a.eventing.on("segment-engine:teaser-loaded", r);
    svg4everybody();
  });
  var q = d.isInternetExplorer(),
    t = $("form");
  n.toggleClass("iOS", d.isIOS())
    .toggleClass("iPad", d.isIPad())
    .toggleClass("ie", q && 12 > q)
    .toggleClass("edge", q && 12 <= q);
  (function () {
    var c = function (a) {
      t.length && (a ? t.removeClass("no-focus") : t.addClass("no-focus"));
    };
    c();
    n.on("mousedown", function () {
      c();
      n.removeClass("key-used");
    });
    n.on("keydown", function (b) {
      b.key === a.Keys.tab && (c(!0), n.addClass("key-used"));
    });
  })();
  new m().initComponent();
  return {
    initModule: u,
    afterInit: function () {
      svg4everybody();
    },
  };
});
define("utmCareerLinksInjector", ["constants", "utm-utils"], function (h, d) {
  function a() {
    a.prototype.collectNodesWithCareerLinks = function (a) {
      return document.querySelectorAll('a[href^\x3d"' + a + '"]');
    };
    a.prototype.parseUrlES5 = function (a) {
      var c = document.createElement("a");
      c.href = a;
      return {
        origin: c.protocol + "//" + c.hostname + (c.port ? ":" + c.port : ""),
        pathname: c.pathname,
        search: c.search,
      };
    };
    a.prototype.endsWithES5 = function (a, c) {
      return -1 !== a.indexOf(c, a.length - c.length);
    };
    a.prototype.createCareerUrlWithUTM = function (a) {
      var c = sessionStorage.getItem(h.StorageKey.utmParameters);
      a = this.parseUrlES5(a);
      var g = a.origin + a.pathname;
      g = this.endsWithES5(g, "/") ? g : g + "/";
      a = a.search;
      var k = d.getFullDomain(window.location.href),
        m = [];
      if (c)
        try {
          c = JSON.parse(c);
        } catch (b) {
          c = null;
        }
      else c = null;
      if (c) {
        var n = Object.keys(c).length,
          p = "N & DSLandingPage" === c.utmSource,
          q =
            "object" === typeof c &&
            null !== c &&
            !Array.isArray(c) &&
            "timestamp" in c,
          t =
            "object" === typeof c &&
            null !== c &&
            !Array.isArray(c) &&
            "userReferrer" in c,
          w =
            "object" === typeof c &&
            null !== c &&
            !Array.isArray(c) &&
            "startPageIsVacancy" in c;
        2 === n && p && q && (c = null);
        4 === n && p && q && t && w && delete c.utmSource;
      }
      if (c)
        if (
          ((n = d.isSessionHasUtmParameters(c)),
          (p = c.userReferrer
            ? d.getFullDomain(c.userReferrer).replace(/^www\./, "")
            : ""),
          n)
        )
          for (
            k = {
              utmMedium: "utm_medium",
              utmTerm: "utm_term",
              utmSource: "utm_source",
              utmCampaign: "utm_campaign",
              utmContent: "utm_content",
            },
              n = Object.keys(k),
              p = 0;
            p < n.length;
            p++
          )
            (q = n[p]),
              (t = k[q]),
              c.hasOwnProperty(q) && m.push(t + "\x3d" + c[q]);
        else
          m.push("utm_medium\x3dreferrer", "utm_term\x3d" + k),
            p && m.push("utm_source\x3d" + p);
      else
        m.push(
          "utm_medium\x3depam.com_website",
          "utm_term\x3d" + k,
          "utm_source\x3depam.com_website"
        );
      a && "?" !== a && m.push(a.slice(1));
      return (g += "?" + m.join("\x26"));
    };
    a.prototype.updateCareerLinksWithUTM = function () {
      for (
        var a = [
            "https://careers.epam.com",
            "https://feature-70000--anywhere.aws.epm-plx.projects.epam.com",
            "https://staging--anywhere.aws.epm-plx.projects.epam.com",
          ],
          c = 0;
        c < a.length;
        c++
      ) {
        var d = this.collectNodesWithCareerLinks(a[c]);
        if (0 < d.length)
          for (var h = 0; h < d.length; h++)
            d[h].href = this.createCareerUrlWithUTM(d[h].href);
      }
    };
  }
  var m = new a();
  window.addEventListener("load", function () {
    m.updateCareerLinksWithUTM();
  });
  a.moduleName = "utmCareerLinksInjector";
  return a;
});
