(function (f) {
  function g(a) {
    a._dependenciesInQueue--;
    a._dependenciesInQueue || d(a.id, a.dependencies, a.factory);
  }
  function h(a) {
    return !(a in c.cache);
  }
  function k(a) {
    return c.cache[a];
  }
  function d(a, b, e) {
    "string" !== typeof a && null !== a && ((e = b), (b = a), (a = null));
    Array.isArray(b) || ((e = b), (b = null));
    a in c.cache ||
      ((a = { id: a, factory: e, dependencies: b }),
      (b = a.dependencies && b.filter(h)),
      a.dependencies && b.length
        ? d.queue.wait(b, a)
        : ((b = a.dependencies ? a.dependencies.map(k) : [c]),
          (b = a.factory.apply(null, b)),
          a.id && ((c.cache[a.id] = b), d.queue.resolve(a.id))));
  }
  function c(a, b) {
    if (Array.isArray(a)) d(a, b);
    else {
      if (!(a in c.cache))
        throw (
          (console.log("Unresolved dependencies:", d.queue._events),
          'Component "' +
            a +
            '" is not resolved yet. Add module ID to the dependencies of the current module.')
        );
      return c.cache[a];
    }
  }
  d.queue = {
    _events: {},
    wait: function (a, b) {
      b._dependenciesInQueue = a.length;
      a.forEach(
        function (a) {
          this._events[a] = this._events[a] || [];
          this._events[a].push(b);
        }.bind(this)
      );
    },
    resolve: function (a) {
      a in this._events && (this._events[a].forEach(g), delete this._events[a]);
    },
  };
  c.cache = Object.create(null);
  d("require", [], function () {
    return c;
  });
  f.define = d;
  f.require = c;
})(window);
