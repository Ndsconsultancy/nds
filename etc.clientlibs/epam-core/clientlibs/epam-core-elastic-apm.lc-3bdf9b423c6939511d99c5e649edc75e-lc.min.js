/*
 **************************************** !*\
  !*** ../rum-core/dist/es/bootstrap.js ***!
  \*************************************** ./common/utils  ./common/patching  ./state  ************************************************* !*\
  !*** ../rum-core/dist/es/common/after-frame.js ***!
  \************************************************ ************************************************ !*\
  !*** ../rum-core/dist/es/common/apm-server.js ***!
  \*********************************************** ./queue  ./throttle  ./ndjson  ./truncate  ./constants  ./utils  ./polyfills  ./compress  ../state  ./http/fetch  ./http/xhr  ********************************************** !*\
  !*** ../rum-core/dist/es/common/compress.js ***!
  \********************************************* ../performance-monitoring/capture-navigation  **************************************************** !*\
  !*** ../rum-core/dist/es/common/config-service.js ***!
  \*************************************************** ./event-handler  *********************************************** !*\
  !*** ../rum-core/dist/es/common/constants.js ***!
  \********************************************** ********************************************* !*\
  !*** ../rum-core/dist/es/common/context.js ***!
  \******************************************** ./url  *************************************************** !*\
  !*** ../rum-core/dist/es/common/event-handler.js ***!
  \************************************************** ************************************************ !*\
  !*** ../rum-core/dist/es/common/http/fetch.js ***!
  \*********************************************** ../constants  ./response-status  ********************************************************** !*\
  !*** ../rum-core/dist/es/common/http/response-status.js ***!
  \********************************************************* ********************************************** !*\
  !*** ../rum-core/dist/es/common/http/xhr.js ***!
  \********************************************* ../patching/patch-utils  ../polyfills  ************************************************ !*\
  !*** ../rum-core/dist/es/common/instrument.js ***!
  \*********************************************** ***************************************************** !*\
  !*** ../rum-core/dist/es/common/logging-service.js ***!
  \**************************************************** ******************************************** !*\
  !*** ../rum-core/dist/es/common/ndjson.js ***!
  \******************************************* *********************************************************** !*\
  !*** ../rum-core/dist/es/common/observers/page-clicks.js ***!
  \********************************************************** *************************************************************** !*\
  !*** ../rum-core/dist/es/common/observers/page-visibility.js ***!
  \************************************************************** ../../state  ../utils  ********************************************************** !*\
  !*** ../rum-core/dist/es/common/patching/fetch-patch.js ***!
  \********************************************************* ./patch-utils  ../http/fetch  ************************************************************ !*\
  !*** ../rum-core/dist/es/common/patching/history-patch.js ***!
  \*********************************************************** **************************************************** !*\
  !*** ../rum-core/dist/es/common/patching/index.js ***!
  \*************************************************** ./xhr-patch  ./fetch-patch  ./history-patch  ../event-handler  ********************************************************** !*\
  !*** ../rum-core/dist/es/common/patching/patch-utils.js ***!
  \********************************************************* ******************************************************** !*\
  !*** ../rum-core/dist/es/common/patching/xhr-patch.js ***!
  \******************************************************* *********************************************** !*\
  !*** ../rum-core/dist/es/common/polyfills.js ***!
  \********************************************** promise-polyfill  ******************************************* !*\
  !*** ../rum-core/dist/es/common/queue.js ***!
  \****************************************** ***************************************************** !*\
  !*** ../rum-core/dist/es/common/service-factory.js ***!
  \**************************************************** ./apm-server  ./config-service  ./logging-service  ********************************************** !*\
  !*** ../rum-core/dist/es/common/throttle.js ***!
  \********************************************* ********************************************** !*\
  !*** ../rum-core/dist/es/common/truncate.js ***!
  \********************************************* ***************************************** !*\
  !*** ../rum-core/dist/es/common/url.js ***!
  \**************************************** ******************************************* !*\
  !*** ../rum-core/dist/es/common/utils.js ***!
  \****************************************** ********************************************************** !*\
  !*** ../rum-core/dist/es/error-logging/error-logging.js ***!
  \********************************************************* ./stack-trace  ../common/utils  ../common/context  ../common/truncate  ************************************************** !*\
  !*** ../rum-core/dist/es/error-logging/index.js ***!
  \************************************************* ./error-logging  ../common/constants  ../common/service-factory  ******************************************************** !*\
  !*** ../rum-core/dist/es/error-logging/stack-trace.js ***!
  \******************************************************* error-stack-parser  ************************************ !*\
  !*** ../rum-core/dist/es/index.js ***!
  \*********************************** ./performance-monitoring  ./common/service-factory  ./common/observers  ./common/constants  ./common/instrument  ./common/after-frame  ./bootstrap  ./opentracing  ************************************************ !*\
  !*** ../rum-core/dist/es/opentracing/index.js ***!
  \*********************************************** ./tracer  ./span  *********************************************** !*\
  !*** ../rum-core/dist/es/opentracing/span.js ***!
  \********************************************** opentracing/lib/span  ../performance-monitoring/transaction  ************************************************* !*\
  !*** ../rum-core/dist/es/opentracing/tracer.js ***!
  \************************************************ opentracing/lib/tracer  opentracing/lib/constants  *************************************************************** !*\
  !*** ../rum-core/dist/es/performance-monitoring/breakdown.js ***!
  \************************************************************** ************************************************************************ !*\
  !*** ../rum-core/dist/es/performance-monitoring/capture-navigation.js ***!
  \*********************************************************************** *********************************************************** !*\
  !*** ../rum-core/dist/es/performance-monitoring/index.js ***!
  \********************************************************** ./transaction-service  ************************************************************* !*\
  !*** ../rum-core/dist/es/performance-monitoring/metrics.js ***!
  \************************************************************ **************************************************************************** !*\
  !*** ../rum-core/dist/es/performance-monitoring/performance-monitoring.js ***!
  \*************************************************************************** ../common/url  ../common/patching  ../common/patching/patch-utils  *************************************************************** !*\
  !*** ../rum-core/dist/es/performance-monitoring/span-base.js ***!
  \************************************************************** ********************************************************** !*\
  !*** ../rum-core/dist/es/performance-monitoring/span.js ***!
  \********************************************************* ./span-base  ************************************************************************* !*\
  !*** ../rum-core/dist/es/performance-monitoring/transaction-service.js ***!
  \************************************************************************ ../common/polyfills  ./transaction  ./metrics  ./capture-navigation  ***************************************************************** !*\
  !*** ../rum-core/dist/es/performance-monitoring/transaction.js ***!
  \**************************************************************** ./breakdown  ************************************ !*\
  !*** ../rum-core/dist/es/state.js ***!
  \*********************************** ************************* !*\
  !*** ./src/apm-base.js ***!
  \************************ @elastic/apm-rum-core  ******************************************************************* !*\
  !*** ../../node_modules/error-stack-parser/error-stack-parser.js ***!
  \****************************************************************** stackframe  ******************************************************* !*\
  !*** ../../node_modules/opentracing/lib/constants.js ***!
  \****************************************************** ******************************************************* !*\
  !*** ../../node_modules/opentracing/lib/functions.js ***!
  \****************************************************** ./reference  ************************************************** !*\
  !*** ../../node_modules/opentracing/lib/noop.js ***!
  \************************************************* ./span_context  ******************************************************* !*\
  !*** ../../node_modules/opentracing/lib/reference.js ***!
  \****************************************************** ************************************************** !*\
  !*** ../../node_modules/opentracing/lib/span.js ***!
  \************************************************* ./noop  ********************************************************** !*\
  !*** ../../node_modules/opentracing/lib/span_context.js ***!
  \********************************************************* **************************************************** !*\
  !*** ../../node_modules/opentracing/lib/tracer.js ***!
  \*************************************************** ./functions  ********************************************************** !*\
  !*** ../../node_modules/promise-polyfill/src/finally.js ***!
  \********************************************************* ******************************************************** !*\
  !*** ../../node_modules/promise-polyfill/src/index.js ***!
  \******************************************************* ./finally  *************************************************** !*\
  !*** ../../node_modules/stackframe/stackframe.js ***!
  \************************************************** ********************** !*\
  !*** ./src/index.js ***!
  \********************* ./apm-base */
(function (w, z) {
  "object" === typeof exports && "object" === typeof module
    ? (module.exports = z())
    : "function" === typeof define && define.amd
    ? define([], z)
    : "object" === typeof exports
    ? (exports["elastic-apm-rum"] = z())
    : (w["elastic-apm-rum"] = z());
})(self, function () {
  return (function () {
    function w(q) {
      var c = Z[q];
      if (void 0 !== c) return c.exports;
      c = Z[q] = { exports: {} };
      z[q].call(c.exports, c, c.exports, w);
      return c.exports;
    }
    var z = {
        "../rum-core/dist/es/bootstrap.js": function (q, c, a) {
          function n() {
            (0, p.isPlatformSupported)()
              ? ((0, m.patchAll)(),
                (t.state.bootstrapTime = (0, p.now)()),
                (l = !0))
              : p.isBrowser &&
                console.log("[Elastic APM] platform is not supported!");
            return l;
          }
          a.r(c);
          a.d(c, {
            bootstrap: function () {
              return n;
            },
          });
          var p = a("../rum-core/dist/es/common/utils.js"),
            m = a("../rum-core/dist/es/common/patching/index.js"),
            t = a("../rum-core/dist/es/state.js"),
            l = !1;
        },
        "../rum-core/dist/es/common/after-frame.js": function (q, c, a) {
          function n(a) {
            var t = function () {
                clearTimeout(l);
                cancelAnimationFrame(r);
                setTimeout(a);
              },
              l = setTimeout(t, p),
              r = requestAnimationFrame(t);
          }
          a.r(c);
          a.d(c, {
            default: function () {
              return n;
            },
          });
          var p = 100;
        },
        "../rum-core/dist/es/common/apm-server.js": function (q, c, a) {
          a.r(c);
          var n = a("../rum-core/dist/es/common/queue.js"),
            p = a("../rum-core/dist/es/common/throttle.js"),
            m = a("../rum-core/dist/es/common/ndjson.js"),
            t = a("../rum-core/dist/es/common/truncate.js"),
            l = a("../rum-core/dist/es/common/constants.js"),
            r = a("../rum-core/dist/es/common/utils.js"),
            f = a("../rum-core/dist/es/common/polyfills.js"),
            g = a("../rum-core/dist/es/common/compress.js"),
            u = a("../rum-core/dist/es/state.js"),
            b = a("../rum-core/dist/es/common/http/fetch.js"),
            h = a("../rum-core/dist/es/common/http/xhr.js");
          q = (function () {
            function d(e, b) {
              this._configService = e;
              this._loggingService = b;
              this.queue = void 0;
              this.throttleEvents = r.noop;
            }
            var k = d.prototype;
            k.init = function () {
              var e = this,
                b = this._configService.get("queueLimit"),
                k = this._configService.get("flushInterval"),
                d = this._configService.get("eventsLimit");
              this.queue = new n.default(
                function (b) {
                  (b = e.sendEvents(b)) &&
                    b.catch(function (b) {
                      e._loggingService.warn(
                        "Failed sending events!",
                        e._constructError(b)
                      );
                    });
                },
                { queueLimit: b, flushInterval: k }
              );
              this.throttleEvents = (0, p.default)(
                this.queue.add.bind(this.queue),
                function () {
                  return e._loggingService.warn(
                    "Dropped events due to throttling!"
                  );
                },
                { limit: d, interval: 6e4 }
              );
              this._configService.observeEvent(l.QUEUE_FLUSH, function () {
                e.queue.flush();
              });
            };
            k._postJson = function (e, b) {
              var k = this,
                d = this._configService.get("apmRequest"),
                v = {
                  payload: b,
                  headers: { "Content-Type": "application/x-ndjson" },
                  beforeSend: d,
                };
              return (0, g.compressPayload)(v)
                .catch(function (e) {
                  u.__DEV__ &&
                    k._loggingService.debug(
                      "Compressing the payload using CompressionStream API failed",
                      e.message
                    );
                  return v;
                })
                .then(function (b) {
                  return k._makeHttpRequest("POST", e, b);
                })
                .then(function (e) {
                  return e.responseText;
                });
            };
            k._constructError = function (e) {
              var b = e.status,
                k = e.responseText;
              if ("undefined" == typeof b) return e;
              e = e.url + " HTTP status: " + b;
              if (u.__DEV__ && k)
                try {
                  var d = [],
                    h = JSON.parse(k);
                  h.errors &&
                    0 < h.errors.length &&
                    (h.errors.forEach(function (e) {
                      return d.push(e.message);
                    }),
                    (e += " " + d.join(",")));
                } catch (E) {
                  this._loggingService.debug(
                    "Error parsing response from APM server",
                    E
                  );
                }
              return Error(e);
            };
            k._makeHttpRequest = function (e, k, d) {
              d = void 0 === d ? {} : d;
              var v = d.timeout,
                g = void 0 === v ? l.HTTP_REQUEST_TIMEOUT : v,
                a = d.payload,
                x = d.headers,
                u = d.beforeSend;
              return !u && (0, b.shouldUseFetchWithKeepAlive)(e, a)
                ? (0, b.sendFetchRequest)(e, k, {
                    keepalive: !0,
                    timeout: g,
                    payload: a,
                    headers: x,
                  }).catch(function (b) {
                    if (b instanceof TypeError)
                      return (0, h.sendXHR)(e, k, {
                        timeout: g,
                        payload: a,
                        headers: x,
                        beforeSend: u,
                      });
                    throw b;
                  })
                : (0, h.sendXHR)(e, k, {
                    timeout: g,
                    payload: a,
                    headers: x,
                    beforeSend: u,
                  });
            };
            k.fetchConfig = function (e, b) {
              var k = this,
                d = this.getEndpoints().configEndpoint;
              if (!e)
                return f.Promise.reject(
                  "serviceName is required for fetching central config."
                );
              d += "?service.name\x3d" + e;
              b && (d += "\x26service.environment\x3d" + b);
              var v = this._configService.getLocalConfig();
              v && (d += "\x26ifnonematch\x3d" + v.etag);
              e = this._configService.get("apmRequest");
              return this._makeHttpRequest("GET", d, {
                timeout: 5e3,
                beforeSend: e,
              })
                .then(function (e) {
                  if (304 === e.status) return v;
                  var b = JSON.parse(e.responseText);
                  if ((e = e.getResponseHeader("etag")))
                    (b.etag = e.replace(/["]/g, "")),
                      k._configService.setLocalConfig(b, !0);
                  return b;
                })
                .catch(function (e) {
                  e = k._constructError(e);
                  return f.Promise.reject(e);
                });
            };
            k.createMetaData = function () {
              var e = this._configService;
              e = {
                service: {
                  name: e.get("serviceName"),
                  version: e.get("serviceVersion"),
                  agent: { name: "rum-js", version: e.version },
                  language: { name: "javascript" },
                  environment: e.get("environment"),
                },
                labels: e.get("context.tags"),
              };
              return (0, t.truncateModel)(t.METADATA_MODEL, e);
            };
            k.addError = function (e) {
              var b;
              this.throttleEvents(((b = {}), (b[l.ERRORS] = e), b));
            };
            k.addTransaction = function (e) {
              var b;
              this.throttleEvents(((b = {}), (b[l.TRANSACTIONS] = e), b));
            };
            k.ndjsonErrors = function (e, b) {
              var k = b ? "e" : "error";
              return e.map(function (e) {
                var d;
                return m.default.stringify(
                  ((d = {}), (d[k] = b ? (0, g.compressError)(e) : e), d)
                );
              });
            };
            k.ndjsonMetricsets = function (e) {
              return e
                .map(function (e) {
                  return m.default.stringify({ metricset: e });
                })
                .join("");
            };
            k.ndjsonTransactions = function (e, b) {
              var k = this,
                d = b ? "x" : "transaction";
              return e.map(function (e) {
                var h,
                  v = "",
                  a = "";
                b ||
                  (e.spans &&
                    ((v = e.spans
                      .map(function (e) {
                        return m.default.stringify({ span: e });
                      })
                      .join("")),
                    delete e.spans),
                  e.breakdown &&
                    ((a = k.ndjsonMetricsets(e.breakdown)),
                    delete e.breakdown));
                return (
                  m.default.stringify(
                    ((h = {}),
                    (h[d] = b ? (0, g.compressTransaction)(e) : e),
                    h)
                  ) +
                  v +
                  a
                );
              });
            };
            k.sendEvents = function (e) {
              var b, k;
              if (0 !== e.length) {
                for (var d = [], h = [], a = 0; a < e.length; a++) {
                  var u = e[a];
                  u[l.TRANSACTIONS] && d.push(u[l.TRANSACTIONS]);
                  u[l.ERRORS] && h.push(u[l.ERRORS]);
                }
                if (0 !== d.length || 0 !== h.length) {
                  e = this._configService;
                  d = ((b = {}), (b[l.TRANSACTIONS] = d), (b[l.ERRORS] = h), b);
                  if ((b = e.applyFilters(d)))
                    return (
                      (d = 2 < e.get("apiVersion")),
                      (h = []),
                      (e = this.createMetaData()),
                      h.push(
                        m.default.stringify(
                          ((k = {}),
                          (k[d ? "m" : "metadata"] = d
                            ? (0, g.compressMetadata)(e)
                            : e),
                          k)
                        )
                      ),
                      (h = h.concat(
                        this.ndjsonErrors(b[l.ERRORS], d),
                        this.ndjsonTransactions(b[l.TRANSACTIONS], d)
                      )),
                      (k = h.join("")),
                      (b = this.getEndpoints().intakeEndpoint),
                      this._postJson(b, k)
                    );
                  this._loggingService.warn(
                    "Dropped payload due to filtering!"
                  );
                }
              }
            };
            k.getEndpoints = function () {
              var e = this._configService.get("serverUrl"),
                b = this._configService.get("apiVersion");
              b =
                this._configService.get("serverUrlPrefix") ||
                "/intake/v" + b + "/rum/events";
              return {
                intakeEndpoint: e + b,
                configEndpoint: e + "/config/v1/rum/agents",
              };
            };
            return d;
          })();
          c["default"] = q;
        },
        "../rum-core/dist/es/common/compress.js": function (q, c, a) {
          function n(b) {
            return b.map(function (e) {
              return {
                ap: e.abs_path,
                f: e.filename,
                fn: e.function,
                li: e.lineno,
                co: e.colno,
              };
            });
          }
          function p(b) {
            if (!b) return null;
            var e = {},
              d = b.page,
              k = b.http,
              h = b.response,
              g = b.destination,
              a = b.user;
            b = b.custom;
            d && (e.p = { rf: d.referer, url: d.url });
            if (k) {
              d = {};
              var u = k.method,
                f = k.status_code,
                l = k.response;
              d.url = k.url;
              u && (d.mt = u);
              f && (d.sc = f);
              l &&
                (d.r = {
                  ts: l.transfer_size,
                  ebs: l.encoded_body_size,
                  dbs: l.decoded_body_size,
                });
              e.h = d;
            }
            h &&
              (e.r = {
                ts: h.transfer_size,
                ebs: h.encoded_body_size,
                dbs: h.decoded_body_size,
              });
            g &&
              ((k = g.service),
              (e.dt = {
                se: { n: k.name, t: k.type, rc: k.resource },
                ad: g.address,
                po: g.port,
              }));
            a && (e.u = { id: a.id, un: a.username, em: a.email });
            b && (e.cu = b);
            return e;
          }
          function m(b) {
            if (!b) return null;
            var e = t(b.navigationTiming);
            var d = b.agent;
            b = {};
            e && (b = { fb: e.rs, di: e.di, dc: e.dc });
            if (d) {
              var k = d.firstContentfulPaint;
              d = d.largestContentfulPaint;
              k && (b.fp = k);
              d && (b.lp = d);
            }
            b = 0 === Object.keys(b).length ? null : b;
            return { nt: e, a: b };
          }
          function t(b) {
            if (!b) return null;
            var e = {};
            h.COMPRESSED_NAV_TIMING_MARKS.forEach(function (d, k) {
              e[d] = b[h.NAVIGATION_TIMING_MARKS[k]];
            });
            return e;
          }
          function l(b) {
            var e = b.service,
              d = e.agent;
            return {
              se: {
                n: e.name,
                ve: e.version,
                a: { n: d.name, ve: d.version },
                la: { n: e.language.name },
                en: e.environment,
              },
              l: b.labels,
            };
          }
          function r(b) {
            var e = b.spans.map(function (e) {
              var d = {
                id: e.id,
                n: e.name,
                t: e.type,
                s: e.start,
                d: e.duration,
                c: p(e.context),
                o: e.outcome,
                sr: e.sample_rate,
              };
              e.parent_id !== b.id && (d.pid = e.parent_id);
              !0 === e.sync && (d.sy = !0);
              e.subtype && (d.su = e.subtype);
              e.action && (d.ac = e.action);
              return d;
            });
            e = {
              id: b.id,
              tid: b.trace_id,
              n: b.name,
              t: b.type,
              d: b.duration,
              c: p(b.context),
              k: m(b.marks),
              me: g(b.breakdown),
              y: e,
              yc: { sd: e.length },
              sm: b.sampled,
              sr: b.sample_rate,
              o: b.outcome,
            };
            if (b.experience) {
              var d = b.experience;
              e.exp = { cls: d.cls, fid: d.fid, tbt: d.tbt, lt: d.longtask };
            }
            b.session &&
              ((d = b.session), (e.ses = { id: d.id, seq: d.sequence }));
            return e;
          }
          function f(b) {
            var e = b.exception;
            e = {
              id: b.id,
              cl: b.culprit,
              ex: { mg: e.message, st: n(e.stacktrace), t: b.type },
              c: p(b.context),
            };
            var d = b.transaction;
            d &&
              ((e.tid = b.trace_id),
              (e.pid = b.parent_id),
              (e.xid = b.transaction_id),
              (e.x = { t: d.type, sm: d.sampled }));
            return e;
          }
          function g(b) {
            return b.map(function (b) {
              var e = b.span;
              b = b.samples;
              return null != e
                ? {
                    y: { t: e.type },
                    sa: {
                      ysc: { v: b["span.self_time.count"].value },
                      yss: { v: b["span.self_time.sum.us"].value },
                    },
                  }
                : {
                    sa: {
                      xdc: { v: b["transaction.duration.count"].value },
                      xds: { v: b["transaction.duration.sum.us"].value },
                      xbc: { v: b["transaction.breakdown.count"].value },
                    },
                  };
            });
          }
          function u(h, e) {
            void 0 === e && (e = "gzip");
            var k = "function" === typeof CompressionStream;
            return new b.Promise(function (b) {
              if (!k || (0, d.isBeaconInspectionEnabled)()) return b(h);
              var g = h.headers,
                a = h.beforeSend,
                v = new Blob([h.payload])
                  .stream()
                  .pipeThrough(new CompressionStream(e));
              return new Response(v).blob().then(function (d) {
                g["Content-Encoding"] = e;
                return b({ payload: d, headers: g, beforeSend: a });
              });
            });
          }
          a.r(c);
          a.d(c, {
            compressMetadata: function () {
              return l;
            },
            compressTransaction: function () {
              return r;
            },
            compressError: function () {
              return f;
            },
            compressMetricsets: function () {
              return g;
            },
            compressPayload: function () {
              return u;
            },
          });
          var b = a("../rum-core/dist/es/common/polyfills.js"),
            h = a(
              "../rum-core/dist/es/performance-monitoring/capture-navigation.js"
            ),
            d = a("../rum-core/dist/es/common/utils.js");
        },
        "../rum-core/dist/es/common/config-service.js": function (q, c, a) {
          function n() {
            n =
              Object.assign ||
              function (a) {
                for (var f = 1; f < arguments.length; f++) {
                  var g = arguments[f],
                    u;
                  for (u in g)
                    Object.prototype.hasOwnProperty.call(g, u) && (a[u] = g[u]);
                }
                return a;
              };
            return n.apply(this, arguments);
          }
          function p(a) {
            if (!a) return {};
            var f = {},
              g = /^data-([\w-]+)$/;
            a = a.attributes;
            for (var u = 0; u < a.length; u++) {
              var b = a[u];
              if (g.test(b.nodeName)) {
                var h = b.nodeName
                  .match(g)[1]
                  .split("-")
                  .map(function (b, h) {
                    return 0 < h
                      ? b.charAt(0).toUpperCase() + b.substring(1)
                      : b;
                  })
                  .join("");
                f[h] = b.value || b.nodeValue;
              }
            }
            return f;
          }
          a.r(c);
          var m = a("../rum-core/dist/es/common/utils.js"),
            t = a("../rum-core/dist/es/common/event-handler.js"),
            l = a("../rum-core/dist/es/common/constants.js");
          q = (function () {
            function a() {
              this.config = {
                serviceName: "",
                serviceVersion: "",
                environment: "",
                serverUrl: "http://localhost:8200",
                serverUrlPrefix: "",
                active: !0,
                instrument: !0,
                disableInstrumentations: [],
                logLevel: "warn",
                breakdownMetrics: !1,
                ignoreTransactions: [],
                eventsLimit: 80,
                queueLimit: -1,
                flushInterval: 500,
                distributedTracing: !0,
                distributedTracingOrigins: [],
                distributedTracingHeaderName: "traceparent",
                pageLoadTraceId: "",
                pageLoadSpanId: "",
                pageLoadSampled: !1,
                pageLoadTransactionName: "",
                propagateTracestate: !1,
                transactionSampleRate: 1,
                centralConfig: !1,
                monitorLongtasks: !0,
                apiVersion: 2,
                context: {},
                session: !1,
                apmRequest: null,
              };
              this.events = new t.default();
              this.filters = [];
              this.version = "";
            }
            var f = a.prototype;
            f.init = function () {
              var a = (0, m.getCurrentScript)();
              a = p(a);
              this.setConfig(a);
            };
            f.setVersion = function (a) {
              this.version = a;
            };
            f.addFilter = function (a) {
              if ("function" !== typeof a)
                throw Error("Argument to must be function");
              this.filters.push(a);
            };
            f.applyFilters = function (a) {
              for (var g = 0; g < this.filters.length; g++)
                if (((a = this.filters[g](a)), !a)) return;
              return a;
            };
            f.get = function (a) {
              return a.split(".").reduce(function (a, b) {
                return a && a[b];
              }, this.config);
            };
            f.setUserContext = function (a) {
              void 0 === a && (a = {});
              var g = {},
                b = a;
              a = b.id;
              var h = b.username;
              b = b.email;
              if ("number" === typeof a || "string" === typeof a) g.id = a;
              "string" === typeof h && (g.username = h);
              "string" === typeof b && (g.email = b);
              this.config.context.user = (0, m.extend)(
                this.config.context.user || {},
                g
              );
            };
            f.setCustomContext = function (a) {
              void 0 === a && (a = {});
              this.config.context.custom = (0, m.extend)(
                this.config.context.custom || {},
                a
              );
            };
            f.addLabels = function (a) {
              var g = this;
              this.config.context.tags || (this.config.context.tags = {});
              Object.keys(a).forEach(function (b) {
                return (0, m.setLabel)(b, a[b], g.config.context.tags);
              });
            };
            f.setConfig = function (a) {
              void 0 === a && (a = {});
              var g = a,
                b = g.transactionSampleRate;
              if ((g = g.serverUrl)) a.serverUrl = g.replace(/\/+$/, "");
              (0, m.isUndefined)(b) ||
                (1e-4 > b && 0 < b && (b = 1e-4),
                (a.transactionSampleRate = Math.round(1e4 * b) / 1e4));
              (0, m.merge)(this.config, a);
              this.events.send(l.CONFIG_CHANGE, [this.config]);
            };
            f.validate = function (a) {
              void 0 === a && (a = {});
              var g = ["serviceName", "serverUrl"],
                b = { missing: [], invalid: [] };
              Object.keys(a).forEach(function (d) {
                -1 === g.indexOf(d) || a[d] || b.missing.push(d);
              });
              a.serviceName &&
                !/^[a-zA-Z0-9 _-]+$/.test(a.serviceName) &&
                b.invalid.push({
                  key: "serviceName",
                  value: a.serviceName,
                  allowed: "a-z, A-Z, 0-9, _, -, \x3cspace\x3e",
                });
              var h = a.transactionSampleRate;
              "undefined" !== typeof h &&
                ("number" !== typeof h || isNaN(h) || 0 > h || 1 < h) &&
                b.invalid.push({
                  key: "transactionSampleRate",
                  value: h,
                  allowed: "Number between 0 and 1",
                });
              return b;
            };
            f.getLocalConfig = function () {
              var a = sessionStorage;
              this.config.session && (a = localStorage);
              if ((a = a.getItem(l.LOCAL_CONFIG_KEY))) return JSON.parse(a);
            };
            f.setLocalConfig = function (a, f) {
              a &&
                (f && ((f = this.getLocalConfig()), (a = n({}, f, a))),
                (f = sessionStorage),
                this.config.session && (f = localStorage),
                f.setItem(l.LOCAL_CONFIG_KEY, JSON.stringify(a)));
            };
            f.dispatchEvent = function (a, f) {
              this.events.send(a, f);
            };
            f.observeEvent = function (a, f) {
              return this.events.observe(a, f);
            };
            return a;
          })();
          c["default"] = q;
        },
        "../rum-core/dist/es/common/constants.js": function (q, c, a) {
          a.r(c);
          a.d(c, {
            SCHEDULE: function () {
              return n;
            },
            INVOKE: function () {
              return p;
            },
            ADD_EVENT_LISTENER_STR: function () {
              return m;
            },
            REMOVE_EVENT_LISTENER_STR: function () {
              return t;
            },
            RESOURCE_INITIATOR_TYPES: function () {
              return l;
            },
            REUSABILITY_THRESHOLD: function () {
              return r;
            },
            MAX_SPAN_DURATION: function () {
              return f;
            },
            PAGE_LOAD_DELAY: function () {
              return g;
            },
            PAGE_LOAD: function () {
              return u;
            },
            ROUTE_CHANGE: function () {
              return b;
            },
            NAME_UNKNOWN: function () {
              return v;
            },
            TYPE_CUSTOM: function () {
              return h;
            },
            USER_TIMING_THRESHOLD: function () {
              return B;
            },
            TRANSACTION_START: function () {
              return y;
            },
            TRANSACTION_END: function () {
              return M;
            },
            CONFIG_CHANGE: function () {
              return F;
            },
            QUEUE_FLUSH: function () {
              return w;
            },
            QUEUE_ADD_TRANSACTION: function () {
              return N;
            },
            XMLHTTPREQUEST: function () {
              return z;
            },
            FETCH: function () {
              return A;
            },
            HISTORY: function () {
              return O;
            },
            EVENT_TARGET: function () {
              return P;
            },
            CLICK: function () {
              return Q;
            },
            ERROR: function () {
              return J;
            },
            BEFORE_EVENT: function () {
              return R;
            },
            AFTER_EVENT: function () {
              return S;
            },
            LOCAL_CONFIG_KEY: function () {
              return T;
            },
            HTTP_REQUEST_TYPE: function () {
              return k;
            },
            LONG_TASK: function () {
              return U;
            },
            PAINT: function () {
              return V;
            },
            MEASURE: function () {
              return W;
            },
            NAVIGATION: function () {
              return X;
            },
            RESOURCE: function () {
              return Y;
            },
            FIRST_CONTENTFUL_PAINT: function () {
              return K;
            },
            LARGEST_CONTENTFUL_PAINT: function () {
              return G;
            },
            KEYWORD_LIMIT: function () {
              return ba;
            },
            TEMPORARY_TYPE: function () {
              return e;
            },
            USER_INTERACTION: function () {
              return d;
            },
            TRANSACTION_TYPE_ORDER: function () {
              return x;
            },
            ERRORS: function () {
              return H;
            },
            TRANSACTIONS: function () {
              return ca;
            },
            CONFIG_SERVICE: function () {
              return aa;
            },
            LOGGING_SERVICE: function () {
              return da;
            },
            TRANSACTION_SERVICE: function () {
              return ea;
            },
            APM_SERVER: function () {
              return fa;
            },
            PERFORMANCE_MONITORING: function () {
              return ha;
            },
            ERROR_LOGGING: function () {
              return ia;
            },
            TRUNCATED_TYPE: function () {
              return ja;
            },
            FIRST_INPUT: function () {
              return C;
            },
            LAYOUT_SHIFT: function () {
              return L;
            },
            OUTCOME_SUCCESS: function () {
              return I;
            },
            OUTCOME_FAILURE: function () {
              return D;
            },
            OUTCOME_UNKNOWN: function () {
              return E;
            },
            SESSION_TIMEOUT: function () {
              return ka;
            },
            HTTP_REQUEST_TIMEOUT: function () {
              return la;
            },
          });
          var n = "schedule",
            p = "invoke",
            m = "addEventListener",
            t = "removeEventListener",
            l = "link css script img xmlhttprequest fetch beacon iframe".split(
              " "
            ),
            r = 5e3,
            f = 3e5,
            g = 1e3,
            u = "page-load",
            b = "route-change",
            h = "custom",
            d = "user-interaction",
            k = "http-request",
            e = "temporary",
            v = "Unknown",
            x = [u, b, d, k, h, e],
            I = "success",
            D = "failure",
            E = "unknown",
            B = 60,
            y = "transaction:start",
            M = "transaction:end",
            F = "config:change",
            w = "queue:flush",
            N = "queue:add_transaction",
            z = "xmlhttprequest",
            A = "fetch",
            O = "history",
            P = "eventtarget",
            Q = "click",
            J = "error",
            R = ":before",
            S = ":after",
            T = "elastic_apm_config",
            U = "longtask",
            V = "paint",
            W = "measure",
            X = "navigation",
            Y = "resource",
            K = "first-contentful-paint",
            G = "largest-contentful-paint",
            C = "first-input",
            L = "layout-shift",
            H = "errors",
            ca = "transactions",
            aa = "ConfigService",
            da = "LoggingService",
            ea = "TransactionService",
            fa = "ApmServer",
            ha = "PerformanceMonitoring",
            ia = "ErrorLogging",
            ja = ".truncated",
            ba = 1024,
            ka = 18e5,
            la = 1e4;
        },
        "../rum-core/dist/es/common/context.js": function (q, c, a) {
          function n(b) {
            var e = b.serverTiming;
            b = {
              transfer_size: b.transferSize,
              encoded_body_size: b.encodedBodySize,
              decoded_body_size: b.decodedBodySize,
            };
            if ((e = (0, g.getServerTimingInfo)(e)))
              b.headers = { "server-timing": e };
            return b;
          }
          function p(e) {
            var d = e.protocol,
              a = e.hostname;
            e = e.port;
            "" === e &&
              (e = "http:" === d ? "80" : "https:" === d ? "443" : "");
            d = e;
            e = a.charCodeAt(0) === b && a.charCodeAt(a.length - 1) === h;
            var k = a;
            e && (k = a.slice(1, -1));
            return {
              service: { resource: a + ":" + d, name: "", type: "" },
              address: k,
              port: Number(d),
            };
          }
          function m() {
            return { page: { referer: document.referrer, url: location.href } };
          }
          function t(b, a) {
            if (a) {
              switch (b.type) {
                case d:
                  var h = a.method;
                  var g = a.target;
                  var f = a.response;
                  a = new r.Url(a.url);
                  var v = p(a);
                  a = { http: { method: h, url: a.href }, destination: v };
                  if (g && "undefined" !== typeof g.status) var l = g.status;
                  else f && (l = f.status);
                  a.http.status_code = l;
                  g = a;
                  break;
                case k:
                  l = a.entry;
                  g = a.url;
                  f = new r.Url(g);
                  f = p(f);
                  g = { http: { url: g, response: n(l) }, destination: f };
                  break;
                case e:
                  (l = new r.Url(a.url)), (g = { destination: p(l) });
              }
              b.addContext(g);
            }
          }
          function l(b, e) {
            e = void 0 === e ? {} : e;
            var d = u;
            if (null == e) e = {};
            else {
              var a = {},
                h = Object.keys(e),
                k;
              for (k = 0; k < h.length; k++) {
                var v = h[k];
                0 <= d.indexOf(v) || (a[v] = e[v]);
              }
              e = a;
            }
            d = m();
            a = {};
            b.type === f.PAGE_LOAD &&
              (0, g.isPerfTimelineSupported)() &&
              (h = g.PERF.getEntriesByType(f.NAVIGATION)) &&
              0 < h.length &&
              (a = { response: n(h[0]) });
            b.addContext(d, a, e);
          }
          a.r(c);
          a.d(c, {
            getPageContext: function () {
              return m;
            },
            addSpanContext: function () {
              return t;
            },
            addTransactionContext: function () {
              return l;
            },
          });
          var r = a("../rum-core/dist/es/common/url.js"),
            f = a("../rum-core/dist/es/common/constants.js"),
            g = a("../rum-core/dist/es/common/utils.js"),
            u = ["tags"],
            b = 91,
            h = 93,
            d = "external",
            k = "resource",
            e = "hard-navigation";
        },
        "../rum-core/dist/es/common/event-handler.js": function (q, c, a) {
          a.r(c);
          var n = a("../rum-core/dist/es/common/constants.js");
          q = (function () {
            function a() {
              this.observers = {};
            }
            var m = a.prototype;
            m.observe = function (a, l) {
              var r = this;
              if ("function" === typeof l)
                return (
                  this.observers[a] || (this.observers[a] = []),
                  this.observers[a].push(l),
                  function () {
                    var f = r.observers[a].indexOf(l);
                    -1 < f && r.observers[a].splice(f, 1);
                  }
                );
            };
            m.sendOnly = function (a, l) {
              (a = this.observers[a]) &&
                a.forEach(function (a) {
                  try {
                    a.apply(void 0, l);
                  } catch (f) {
                    console.log(f, f.stack);
                  }
                });
            };
            m.send = function (a, l) {
              this.sendOnly(a + n.BEFORE_EVENT, l);
              this.sendOnly(a, l);
              this.sendOnly(a + n.AFTER_EVENT, l);
            };
            return a;
          })();
          c["default"] = q;
        },
        "../rum-core/dist/es/common/http/fetch.js": function (q, c, a) {
          function n() {
            n =
              Object.assign ||
              function (a) {
                for (var g = 1; g < arguments.length; g++) {
                  var b = arguments[g],
                    h;
                  for (h in b)
                    Object.prototype.hasOwnProperty.call(b, h) && (a[h] = b[h]);
                }
                return a;
              };
            return n.apply(this, arguments);
          }
          function p(a, l) {
            if (!(t() && "keepalive" in new Request(""))) return !1;
            l = l ? (l instanceof Blob ? l.size : new Blob([l]).size) : 0;
            return "POST" === a && l < f;
          }
          function m(a, f, b) {
            var h = b.keepalive;
            h = void 0 === h ? !1 : h;
            var d = b.timeout;
            d = void 0 === d ? l.HTTP_REQUEST_TIMEOUT : d;
            var k = b.payload;
            b = b.headers;
            var e = {};
            if ("function" === typeof AbortController) {
              var g = new AbortController();
              e.signal = g.signal;
              setTimeout(function () {
                return g.abort();
              }, d);
            }
            var u;
            return window
              .fetch(
                f,
                n(
                  {
                    body: k,
                    headers: b,
                    method: a,
                    keepalive: h,
                    credentials: "omit",
                  },
                  e
                )
              )
              .then(function (b) {
                u = b;
                return u.text();
              })
              .then(function (b) {
                b = { url: f, status: u.status, responseText: b };
                if (!(0, r.isResponseSuccessful)(u.status)) throw b;
                return b;
              });
          }
          function t() {
            return (
              "function" === typeof window.fetch &&
              "function" === typeof window.Request
            );
          }
          a.r(c);
          a.d(c, {
            BYTE_LIMIT: function () {
              return f;
            },
            shouldUseFetchWithKeepAlive: function () {
              return p;
            },
            sendFetchRequest: function () {
              return m;
            },
            isFetchSupported: function () {
              return t;
            },
          });
          var l = a("../rum-core/dist/es/common/constants.js"),
            r = a("../rum-core/dist/es/common/http/response-status.js"),
            f = 6e4;
        },
        "../rum-core/dist/es/common/http/response-status.js": function (
          q,
          c,
          a
        ) {
          function n(a) {
            return 0 === a || (399 < a && 600 > a) ? !1 : !0;
          }
          a.r(c);
          a.d(c, {
            isResponseSuccessful: function () {
              return n;
            },
          });
        },
        "../rum-core/dist/es/common/http/xhr.js": function (q, c, a) {
          function n(a, r, f) {
            var g = f.timeout,
              l = void 0 === g ? HTTP_REQUEST_TIMEOUT : g,
              b = f.payload,
              h = f.headers,
              d = f.beforeSend;
            return new t.Promise(function (k, e) {
              var g = new window.XMLHttpRequest();
              g[p.XHR_IGNORE] = !0;
              g.open(a, r, !0);
              g.timeout = l;
              if (h)
                for (var f in h)
                  h.hasOwnProperty(f) && g.setRequestHeader(f, h[f]);
              g.onreadystatechange = function () {
                if (4 === g.readyState) {
                  var b = g.status,
                    a = g.responseText;
                  (0, m.isResponseSuccessful)(b)
                    ? k(g)
                    : e({ url: r, status: b, responseText: a });
                }
              };
              g.onerror = function () {
                e({ url: r, status: g.status, responseText: g.responseText });
              };
              f = !0;
              "function" === typeof d &&
                (f = d({ url: r, method: a, headers: h, payload: b, xhr: g }));
              f
                ? g.send(b)
                : e({
                    url: r,
                    status: 0,
                    responseText: "Request rejected by user configuration.",
                  });
            });
          }
          a.r(c);
          a.d(c, {
            sendXHR: function () {
              return n;
            },
          });
          var p = a("../rum-core/dist/es/common/patching/patch-utils.js"),
            m = a("../rum-core/dist/es/common/http/response-status.js"),
            t = a("../rum-core/dist/es/common/polyfills.js");
        },
        "../rum-core/dist/es/common/instrument.js": function (q, c, a) {
          function n(a, t) {
            var l,
              r =
                ((l = {}),
                (l[p.XMLHTTPREQUEST] = !1),
                (l[p.FETCH] = !1),
                (l[p.HISTORY] = !1),
                (l[p.PAGE_LOAD] = !1),
                (l[p.ERROR] = !1),
                (l[p.EVENT_TARGET] = !1),
                (l[p.CLICK] = !1),
                l);
            if (!a) return r;
            Object.keys(r).forEach(function (a) {
              -1 === t.indexOf(a) && (r[a] = !0);
            });
            return r;
          }
          a.r(c);
          a.d(c, {
            getInstrumentationFlags: function () {
              return n;
            },
          });
          var p = a("../rum-core/dist/es/common/constants.js");
        },
        "../rum-core/dist/es/common/logging-service.js": function (q, c, a) {
          a.r(c);
          var n = a("../rum-core/dist/es/common/utils.js");
          q = (function () {
            function a(a) {
              void 0 === a && (a = {});
              this.levels = ["trace", "debug", "info", "warn", "error"];
              this.level = a.level || "warn";
              this.prefix = a.prefix || "";
              this.resetLogMethods();
            }
            var m = a.prototype;
            m.shouldLog = function (a) {
              return this.levels.indexOf(a) >= this.levels.indexOf(this.level);
            };
            m.setLevel = function (a) {
              a !== this.level && ((this.level = a), this.resetLogMethods());
            };
            m.resetLogMethods = function () {
              var a = this;
              this.levels.forEach(function (l) {
                function r() {
                  var a = l;
                  if ("trace" === l || "debug" === l) a = "info";
                  var g = arguments;
                  g[0] = this.prefix + g[0];
                  console &&
                    ((a = console[a] || console.log),
                    "function" === typeof a && a.apply(console, g));
                }
                a[l] = a.shouldLog(l) ? r : n.noop;
              });
            };
            return a;
          })();
          c["default"] = q;
        },
        "../rum-core/dist/es/common/ndjson.js": function (q, c, a) {
          a.r(c);
          q = (function () {
            function a() {}
            a.stringify = function (a) {
              return JSON.stringify(a) + "\n";
            };
            return a;
          })();
          c["default"] = q;
        },
        "../rum-core/dist/es/common/observers/page-clicks.js": function (
          q,
          c,
          a
        ) {
          function n(a) {
            var m = function (l) {
              if (l.target instanceof Element) {
                var r = l.target,
                  f;
                l = null;
                var g = (f = r.tagName.toLowerCase());
                if (r.dataset.transactionName) g = r.dataset.transactionName;
                else {
                  var u = r.getAttribute("name");
                  u && (g = f + '["' + u + '"]');
                }
                f = g;
                (r = r.getAttribute("class")) &&
                  (l = { custom: { classes: r } });
                (r = a.startTransaction("Click - " + f, p.USER_INTERACTION, {
                  managed: !0,
                  canReuse: !0,
                  reuseThreshold: 300,
                })) &&
                  l &&
                  r.addContext(l);
              }
            };
            window.addEventListener("click", m, !0);
            return function () {
              window.removeEventListener("click", m, !0);
            };
          }
          a.r(c);
          a.d(c, {
            observePageClicks: function () {
              return n;
            },
          });
          var p = a("../rum-core/dist/es/common/constants.js");
        },
        "../rum-core/dist/es/common/observers/page-visibility.js": function (
          q,
          c,
          a
        ) {
          function n(a, f) {
            "hidden" === document.visibilityState &&
              (t.state.lastHiddenStart = 0);
            var g = function () {
                "hidden" === document.visibilityState && p(a, f);
              },
              l = function () {
                return p(a, f);
              };
            window.addEventListener("visibilitychange", g, !0);
            window.addEventListener("pagehide", l, !0);
            return function () {
              window.removeEventListener("visibilitychange", g, !0);
              window.removeEventListener("pagehide", l, !0);
            };
          }
          function p(a, f) {
            if ((f = f.getCurrentTransaction())) {
              var g = a.observeEvent(m.QUEUE_ADD_TRANSACTION, function () {
                a.dispatchEvent(m.QUEUE_FLUSH);
                t.state.lastHiddenStart = (0, l.now)();
                g();
              });
              f.end();
            } else
              a.dispatchEvent(m.QUEUE_FLUSH),
                (t.state.lastHiddenStart = (0, l.now)());
          }
          a.r(c);
          a.d(c, {
            observePageVisibility: function () {
              return n;
            },
          });
          var m = a("../rum-core/dist/es/common/constants.js"),
            t = a("../rum-core/dist/es/state.js"),
            l = a("../rum-core/dist/es/common/utils.js");
        },
        "../rum-core/dist/es/common/patching/fetch-patch.js": function (
          q,
          c,
          a
        ) {
          function n(a) {
            function g(b) {
              b.state = t.SCHEDULE;
              a(t.SCHEDULE, b);
            }
            function f(b) {
              b.state = t.INVOKE;
              a(t.INVOKE, b);
            }
            function b(b, a) {
              var e = b.getReader();
              (function x() {
                e.read().then(
                  function (b) {
                    b.done ? f(a) : x();
                  },
                  function (b) {
                    a.data.aborted = b && "AbortError" === b.name;
                    a.data.error = b;
                    f(a);
                  }
                );
              })();
            }
            if ((0, r.isFetchSupported)()) {
              var h = window.fetch;
              window.fetch = function (a, k) {
                var e = this,
                  d = arguments;
                if ("string" === typeof a) {
                  var u = new Request(a, k);
                  d = a;
                } else if (a) (u = a), (d = u.url);
                else return h.apply(e, d);
                var r = {
                  source: t.FETCH,
                  state: "",
                  type: "macroTask",
                  data: { target: u, method: u.method, url: d, aborted: !1 },
                };
                return new p.Promise(function (a, d) {
                  m.globalState.fetchInProgress = !0;
                  g(r);
                  try {
                    var k = h.apply(e, [u]);
                  } catch (y) {
                    d(y);
                    r.data.error = y;
                    f(r);
                    m.globalState.fetchInProgress = !1;
                    return;
                  }
                  k.then(
                    function (e) {
                      var d = e.clone ? e.clone() : {};
                      a(e);
                      (0, l.scheduleMicroTask)(function () {
                        r.data.response = e;
                        var a = d.body;
                        a ? b(a, r) : f(r);
                      });
                    },
                    function (b) {
                      d(b);
                      (0, l.scheduleMicroTask)(function () {
                        r.data.aborted = b && "AbortError" === b.name;
                        r.data.error = b;
                        f(r);
                      });
                    }
                  );
                  m.globalState.fetchInProgress = !1;
                });
              };
            }
          }
          a.r(c);
          a.d(c, {
            patchFetch: function () {
              return n;
            },
          });
          var p = a("../rum-core/dist/es/common/polyfills.js"),
            m = a("../rum-core/dist/es/common/patching/patch-utils.js"),
            t = a("../rum-core/dist/es/common/constants.js"),
            l = a("../rum-core/dist/es/common/utils.js"),
            r = a("../rum-core/dist/es/common/http/fetch.js");
        },
        "../rum-core/dist/es/common/patching/history-patch.js": function (
          q,
          c,
          a
        ) {
          function n(a) {
            if (window.history) {
              var m = history.pushState;
              "function" === typeof m &&
                (history.pushState = function (l, r, f) {
                  a(p.INVOKE, {
                    source: p.HISTORY,
                    data: { state: l, title: r, url: f },
                  });
                  m.apply(this, arguments);
                });
            }
          }
          a.r(c);
          a.d(c, {
            patchHistory: function () {
              return n;
            },
          });
          var p = a("../rum-core/dist/es/common/constants.js");
        },
        "../rum-core/dist/es/common/patching/index.js": function (q, c, a) {
          function n() {
            f ||
              ((f = !0),
              (0, p.patchXMLHttpRequest)(function (a, f) {
                r.send(l.XMLHTTPREQUEST, [a, f]);
              }),
              (0, m.patchFetch)(function (a, f) {
                r.send(l.FETCH, [a, f]);
              }),
              (0, t.patchHistory)(function (a, f) {
                r.send(l.HISTORY, [a, f]);
              }));
            return r;
          }
          a.r(c);
          a.d(c, {
            patchAll: function () {
              return n;
            },
            patchEventHandler: function () {
              return r;
            },
          });
          var p = a("../rum-core/dist/es/common/patching/xhr-patch.js"),
            m = a("../rum-core/dist/es/common/patching/fetch-patch.js"),
            t = a("../rum-core/dist/es/common/patching/history-patch.js");
          q = a("../rum-core/dist/es/common/event-handler.js");
          var l = a("../rum-core/dist/es/common/constants.js"),
            r = new q.default(),
            f = !1;
        },
        "../rum-core/dist/es/common/patching/patch-utils.js": function (
          q,
          c,
          a
        ) {
          function n(a) {
            return "__apm_symbol__" + a;
          }
          function p(a, b) {
            a[n("OriginalDelegate")] = b;
          }
          function m(a, b, h) {
            for (var d = a; d && !d.hasOwnProperty(b); )
              d = Object.getPrototypeOf(d);
            !d && a[b] && (d = a);
            a = n(b);
            var k;
            if (d && !(k = d[a])) {
              k = d[a] = d[b];
              var e = d && Object.getOwnPropertyDescriptor(d, b);
              e = e
                ? !1 === e.writable
                  ? !1
                  : !(
                      "function" === typeof e.get &&
                      "undefined" === typeof e.set
                    )
                : !0;
              if (e) {
                var g = h(k, a, b);
                d[b] = function () {
                  return g(this, arguments);
                };
                p(d[b], k);
              }
            }
            return k;
          }
          a.r(c);
          a.d(c, {
            globalState: function () {
              return t;
            },
            apmSymbol: function () {
              return n;
            },
            patchMethod: function () {
              return m;
            },
            XHR_IGNORE: function () {
              return l;
            },
            XHR_SYNC: function () {
              return r;
            },
            XHR_URL: function () {
              return f;
            },
            XHR_METHOD: function () {
              return g;
            },
          });
          var t = { fetchInProgress: !1 },
            l = n("xhrIgnore"),
            r = n("xhrSync"),
            f = n("xhrURL"),
            g = n("xhrMethod");
        },
        "../rum-core/dist/es/common/patching/xhr-patch.js": function (q, c, a) {
          function n(a) {
            function l(b, h) {
              b.state !== m.INVOKE &&
                ((b.state = m.INVOKE), (b.data.status = h), a(m.INVOKE, b));
            }
            function r(b) {
              function h(a) {
                d[m.ADD_EVENT_LISTENER_STR](a, function (a) {
                  a = a.type;
                  "readystatechange" === a
                    ? 4 === d.readyState && 0 !== d.status && l(b, "success")
                    : l(b, "load" === a ? "success" : a);
                });
              }
              if (b.state !== m.SCHEDULE) {
                b.state = m.SCHEDULE;
                a(m.SCHEDULE, b);
                var d = b.data.target;
                h("readystatechange");
                h("load");
                h("timeout");
                h("error");
                h("abort");
              }
            }
            var f = XMLHttpRequest.prototype;
            if (f && f[m.ADD_EVENT_LISTENER_STR])
              var g = (0, p.patchMethod)(f, "open", function () {
                  return function (b, a) {
                    b[p.XHR_IGNORE] ||
                      ((b[p.XHR_METHOD] = a[0]),
                      (b[p.XHR_URL] = a[1]),
                      (b[p.XHR_SYNC] = !1 === a[2]));
                    return g.apply(b, a);
                  };
                }),
                u = (0, p.patchMethod)(f, "send", function () {
                  return function (b, a) {
                    if (b[p.XHR_IGNORE]) return u.apply(b, a);
                    var d = {
                      source: m.XMLHTTPREQUEST,
                      state: "",
                      type: "macroTask",
                      data: {
                        target: b,
                        method: b[p.XHR_METHOD],
                        sync: b[p.XHR_SYNC],
                        url: b[p.XHR_URL],
                        status: "",
                      },
                    };
                    try {
                      return r(d), u.apply(b, a);
                    } catch (k) {
                      throw (l(d, "error"), k);
                    }
                  };
                });
          }
          a.r(c);
          a.d(c, {
            patchXMLHttpRequest: function () {
              return n;
            },
          });
          var p = a("../rum-core/dist/es/common/patching/patch-utils.js"),
            m = a("../rum-core/dist/es/common/constants.js");
        },
        "../rum-core/dist/es/common/polyfills.js": function (q, c, a) {
          a.r(c);
          a.d(c, {
            Promise: function () {
              return n;
            },
          });
          q = a("../../node_modules/promise-polyfill/src/index.js");
          c = {};
          a("../rum-core/dist/es/common/utils.js").isBrowser
            ? (c = window)
            : "undefined" !== typeof self && (c = self);
          var n = "Promise" in c ? c.Promise : q.default;
        },
        "../rum-core/dist/es/common/queue.js": function (q, c, a) {
          a.r(c);
          q = (function () {
            function a(a, c) {
              void 0 === c && (c = {});
              this.onFlush = a;
              this.items = [];
              this.queueLimit = c.queueLimit || -1;
              this.flushInterval = c.flushInterval || 0;
              this.timeoutId = void 0;
            }
            var c = a.prototype;
            c._setTimer = function () {
              var a = this;
              this.timeoutId = setTimeout(function () {
                return a.flush();
              }, this.flushInterval);
            };
            c._clear = function () {
              "undefined" !== typeof this.timeoutId &&
                (clearTimeout(this.timeoutId), (this.timeoutId = void 0));
              this.items = [];
            };
            c.flush = function () {
              this.onFlush(this.items);
              this._clear();
            };
            c.add = function (a) {
              this.items.push(a);
              -1 !== this.queueLimit && this.items.length >= this.queueLimit
                ? this.flush()
                : "undefined" === typeof this.timeoutId && this._setTimer();
            };
            return a;
          })();
          c["default"] = q;
        },
        "../rum-core/dist/es/common/service-factory.js": function (q, c, a) {
          a.r(c);
          a.d(c, {
            serviceCreators: function () {
              return f;
            },
            ServiceFactory: function () {
              return g;
            },
          });
          var n = a("../rum-core/dist/es/common/apm-server.js"),
            p = a("../rum-core/dist/es/common/config-service.js"),
            m = a("../rum-core/dist/es/common/logging-service.js"),
            t = a("../rum-core/dist/es/common/constants.js"),
            l = a("../rum-core/dist/es/state.js"),
            r,
            f =
              ((r = {}),
              (r[t.CONFIG_SERVICE] = function () {
                return new p.default();
              }),
              (r[t.LOGGING_SERVICE] = function () {
                return new m.default({ prefix: "[Elastic APM] " });
              }),
              (r[t.APM_SERVER] = function (a) {
                a = a.getService([t.CONFIG_SERVICE, t.LOGGING_SERVICE]);
                return new n.default(a[0], a[1]);
              }),
              r),
            g = (function () {
              function a() {
                this.instances = {};
                this.initialized = !1;
              }
              var b = a.prototype;
              b.init = function () {
                if (!this.initialized) {
                  this.initialized = !0;
                  var a = this.getService(t.CONFIG_SERVICE);
                  a.init();
                  var b = this.getService([t.LOGGING_SERVICE, t.APM_SERVER]),
                    k = b[0];
                  b = b[1];
                  a.events.observe(t.CONFIG_CHANGE, function () {
                    var b = a.get("logLevel");
                    k.setLevel(b);
                  });
                  b.init();
                }
              };
              b.getService = function (a) {
                var b = this;
                if ("string" === typeof a)
                  return (
                    this.instances[a] ||
                      ("function" === typeof f[a]
                        ? (this.instances[a] = f[a](this))
                        : l.__DEV__ &&
                          console.log(
                            "Cannot get service, No creator for: " + a
                          )),
                    this.instances[a]
                  );
                if (Array.isArray(a))
                  return a.map(function (a) {
                    return b.getService(a);
                  });
              };
              return a;
            })();
        },
        "../rum-core/dist/es/common/throttle.js": function (q, c, a) {
          function n(a, c, t) {
            var l = this,
              r = t.limit,
              f = t.interval,
              g = 0,
              u;
            return function () {
              g++;
              "undefined" === typeof u &&
                (u = setTimeout(function () {
                  g = 0;
                  u = void 0;
                }, f));
              return g > r && "function" === typeof c
                ? c.apply(l, arguments)
                : a.apply(l, arguments);
            };
          }
          a.r(c);
          a.d(c, {
            default: function () {
              return n;
            },
          });
        },
        "../rum-core/dist/es/common/truncate.js": function (q, c, a) {
          function n(a, b, k, e) {
            void 0 === b && (b = l.KEYWORD_LIMIT);
            void 0 === k && (k = !1);
            void 0 === e && (e = "N/A");
            k && p(a) && (a = e);
            return "string" === typeof a ? a.substring(0, b) : a;
          }
          function p(a) {
            return null == a || "" === a || "undefined" === typeof a;
          }
          function m(a, b, k) {
            k = n(a[b], k[0], k[1]);
            p(k) ? delete a[b] : (a[b] = k);
          }
          function t(a, b, k) {
            void 0 === a && (a = {});
            void 0 === k && (k = b);
            for (
              var e = Object.keys(a),
                d = [],
                h = function (h) {
                  h = e[h];
                  var g = !0 === a[h] ? d : a[h];
                  Array.isArray(g)
                    ? "*" === h
                      ? Object.keys(k).forEach(function (a) {
                          return m(k, a, g);
                        })
                      : m(k, h, g)
                    : t(g, b, k[h]);
                },
                g = 0;
              g < e.length;
              g++
            )
              h(g);
            return b;
          }
          a.r(c);
          a.d(c, {
            truncate: function () {
              return n;
            },
            truncateModel: function () {
              return t;
            },
            SPAN_MODEL: function () {
              return g;
            },
            TRANSACTION_MODEL: function () {
              return u;
            },
            ERROR_MODEL: function () {
              return b;
            },
            METADATA_MODEL: function () {
              return r;
            },
            RESPONSE_MODEL: function () {
              return f;
            },
          });
          var l = a("../rum-core/dist/es/common/constants.js"),
            r = {
              service: {
                name: [l.KEYWORD_LIMIT, !0],
                version: !0,
                agent: { version: [l.KEYWORD_LIMIT, !0] },
                environment: !0,
              },
              labels: { "*": !0 },
            },
            f = { "*": !0, headers: { "*": !0 } };
          q = {
            user: { id: !0, email: !0, username: !0 },
            tags: { "*": !0 },
            http: { response: f },
            destination: {
              address: [l.KEYWORD_LIMIT],
              service: { "*": [l.KEYWORD_LIMIT, !0] },
            },
            response: f,
          };
          var g = {
              name: [l.KEYWORD_LIMIT, !0],
              type: [l.KEYWORD_LIMIT, !0],
              id: [l.KEYWORD_LIMIT, !0],
              trace_id: [l.KEYWORD_LIMIT, !0],
              parent_id: [l.KEYWORD_LIMIT, !0],
              transaction_id: [l.KEYWORD_LIMIT, !0],
              subtype: !0,
              action: !0,
              context: q,
            },
            u = {
              name: !0,
              parent_id: !0,
              type: [l.KEYWORD_LIMIT, !0],
              id: [l.KEYWORD_LIMIT, !0],
              trace_id: [l.KEYWORD_LIMIT, !0],
              span_count: { started: [l.KEYWORD_LIMIT, !0] },
              context: q,
            },
            b = {
              id: [l.KEYWORD_LIMIT, !0],
              trace_id: !0,
              transaction_id: !0,
              parent_id: !0,
              culprit: !0,
              exception: { type: !0 },
              transaction: { type: !0 },
              context: q,
            };
        },
        "../rum-core/dist/es/common/url.js": function (q, c, a) {
          function n(a, f) {
            void 0 === f && (f = 2);
            var g = new l(a);
            a = g.query;
            g = g.path.substring(1).split("/");
            for (
              var r = /\W|_/g,
                b = /[0-9]/g,
                h = /[a-z]/g,
                d = /[A-Z]/g,
                k = [],
                e = !1,
                v = 0;
              v < g.length;
              v++
            ) {
              var c = g[v];
              if (e || v > f - 1) {
                c && k.push("*");
                break;
              }
              if (2 <= (c.match(r) || []).length) k.push(":id"), (e = !0);
              else {
                var m = (c.match(b) || []).length;
                if (3 < m || (3 < c.length && 0.3 <= m / c.length))
                  k.push(":id"), (e = !0);
                else {
                  var t = (c.match(d) || []).length;
                  m = (c.match(h) || []).length / c.length;
                  t /= c.length;
                  5 < c.length && ((0.3 < t && 0.6 > t) || (0.3 < m && 0.6 > m))
                    ? (k.push(":id"), (e = !0))
                    : c && k.push(c);
                }
              }
            }
            return (
              "/" +
              (2 <= k.length ? k.join("/") : k.join("")) +
              (a ? "?{query}" : "")
            );
          }
          a.r(c);
          a.d(c, {
            Url: function () {
              return l;
            },
            slugifyUrl: function () {
              return n;
            },
          });
          var p = a("../rum-core/dist/es/common/utils.js"),
            m = [
              ["#", "hash"],
              ["?", "query"],
              ["/", "path"],
              ["@", "auth", 1],
              [NaN, "host", void 0, 1],
            ],
            t = /^([a-z][a-z0-9.+-]*:)?(\/\/)?([\S\s]*)/i,
            l = (function () {
              function a(a) {
                var g = this.extractProtocol(a || "");
                a = g.protocol;
                var b = g.address,
                  h = g.slashes;
                g = !a && !h;
                var d = this.getLocation(),
                  k = m.slice();
                b = b.replace("\\", "/");
                h || (k[2] = [NaN, "path"]);
                for (var e = 0; e < k.length; e++) {
                  var f = k[e],
                    l = f[0],
                    c = f[1];
                  if ("string" === typeof l) {
                    if (((h = b.indexOf(l)), ~h)) {
                      var r = f[2];
                      r
                        ? ((l = b.lastIndexOf(l)),
                          (h = Math.max(h, l)),
                          (this[c] = b.slice(0, h)),
                          (b = b.slice(h + r)))
                        : ((this[c] = b.slice(h)), (b = b.slice(0, h)));
                    }
                  } else (this[c] = b), (b = "");
                  this[c] = this[c] || (g && f[3] ? d[c] || "" : "");
                  f[3] && (this[c] = this[c].toLowerCase());
                }
                g &&
                  "/" !== this.path.charAt(0) &&
                  (this.path = "/" + this.path);
                this.relative = g;
                this.protocol = a || d.protocol;
                this.hostname = this.host;
                this.port = "";
                if (/:\d+$/.test(this.host)) {
                  b = this.host.split(":");
                  a = b.pop();
                  b = b.join(":");
                  a: {
                    switch (this.protocol) {
                      case "http:":
                        g = "80" === a;
                        break a;
                      case "https:":
                        g = "443" === a;
                        break a;
                    }
                    g = !0;
                  }
                  g ? (this.host = b) : (this.port = a);
                  this.hostname = b;
                }
                this.origin =
                  this.protocol && this.host && "file:" !== this.protocol
                    ? this.protocol + "//" + this.host
                    : "null";
                this.href = this.toString();
              }
              var f = a.prototype;
              f.toString = function () {
                var a = this.protocol;
                a += "//";
                if (this.auth) {
                  var f = this.auth.split(":");
                  a +=
                    (f[0] ? "[REDACTED]" : "") +
                    (f[1] ? ":[REDACTED]" : "") +
                    "@";
                }
                a += this.host;
                a += this.path;
                a += this.query;
                return (a += this.hash);
              };
              f.getLocation = function () {
                var a = {};
                p.isBrowser && (a = window);
                return a.location;
              };
              f.extractProtocol = function (a) {
                a = t.exec(a);
                return {
                  protocol: a[1] ? a[1].toLowerCase() : "",
                  slashes: !!a[2],
                  address: a[3],
                };
              };
              return a;
            })();
        },
        "../rum-core/dist/es/common/utils.js": function (q, c, a) {
          function n() {
            return "withCredentials" in new window.XMLHttpRequest();
          }
          function p(a) {
            for (var b = [], e = 0; e < a.length; e++) b.push(L[a[e]]);
            return b.join("");
          }
          function m() {
            return "undefined" != typeof crypto &&
              "function" == typeof crypto.getRandomValues
              ? crypto.getRandomValues(H)
              : "undefined" != typeof msCrypto &&
                "function" == typeof msCrypto.getRandomValues
              ? msCrypto.getRandomValues(H)
              : H;
          }
          function t(a) {
            return p(m()).substr(0, a);
          }
          function l(a) {
            if (a && a.traceId && a.id && a.parentId)
              return (
                "00-" +
                a.traceId +
                "-" +
                (a.sampled ? a.id : a.parentId) +
                "-" +
                (a.sampled ? "01" : "00")
              );
          }
          function r(a) {
            if (
              (a =
                /^([\da-f]{2})-([\da-f]{32})-([\da-f]{16})-([\da-f]{2})$/.exec(
                  a
                ))
            )
              return { traceId: a[2], id: a[3], sampled: "00" !== a[4] };
          }
          function f(a) {
            return (
              /^[\da-f]{2}-[\da-f]{32}-[\da-f]{16}-[\da-f]{2}$/.test(a) &&
              "00000000000000000000000000000000" !== a.slice(3, 35) &&
              "0000000000000000" !== a.slice(36, 52)
            );
          }
          function g(a) {
            a = a.sampleRate;
            if (!("number" !== typeof a || 256 < String(a).length))
              return "es\x3ds:" + a;
          }
          function u(a, b, e) {
            "function" === typeof a.setRequestHeader
              ? a.setRequestHeader(b, e)
              : a.headers && "function" === typeof a.headers.append
              ? a.headers.append(b, e)
              : (a[b] = e);
          }
          function b(a, e) {
            var d = !1;
            "string" === typeof e
              ? (d = a === e)
              : e && "function" === typeof e.test
              ? (d = e.test(a))
              : Array.isArray(e) &&
                e.forEach(function (e) {
                  d || (d = b(a, e));
                });
            return d;
          }
          function h() {
            return (
              G &&
              "function" === typeof Set &&
              "function" === typeof JSON.stringify &&
              C &&
              "function" === typeof C.now &&
              n()
            );
          }
          function d(a, b, e) {
            if (e && a) {
              a = z(a);
              var d = typeof b;
              void 0 != b &&
                "boolean" !== d &&
                "number" !== d &&
                (b = String(b));
              e[a] = b;
              return e;
            }
          }
          function k(a) {
            void 0 === a && (a = []);
            for (var b = [], e = 0; e < a.length; e++) {
              var d = a[e],
                k = d.duration,
                h = d.description;
              d = d.name;
              h && (d += ";desc\x3d" + h);
              k && (d += ";dur\x3d" + k);
              b.push(d);
            }
            return b.join(", ");
          }
          function e() {
            return C.timing.fetchStart;
          }
          function v(a) {
            return a && a.split("?")[0];
          }
          function x(a) {
            return null !== a && "object" === typeof a;
          }
          function I(a) {
            return "function" === typeof a;
          }
          function D(a, b, e) {
            for (var d = 0, k = b.length; d < k; ++d) {
              var h = b[d];
              if (x(h) || I(h))
                for (var g = Object.keys(h), f = 0, l = g.length; f < l; f++) {
                  var c = g[f],
                    v = h[c];
                  e && x(v)
                    ? (x(a[c]) || (a[c] = Array.isArray(v) ? [] : {}),
                      D(a[c], [v], !1))
                    : (a[c] = v);
                }
            }
            return a;
          }
          function E() {
            if ("undefined" !== typeof document)
              for (
                var a = document.getElementsByTagName("script"),
                  b = 0,
                  e = a.length;
                b < e;
                b++
              ) {
                var d = a[b];
                if (0 < d.src.indexOf("elastic")) return d;
              }
          }
          function B() {
            if ("undefined" !== typeof document) {
              var a = document.currentScript;
              return a ? a : E();
            }
          }
          function y(a) {
            return D(a, K.call(arguments, 1), !1);
          }
          function M(a) {
            return D(a, K.call(arguments, 1), !0);
          }
          function F(a) {
            return "undefined" === typeof a;
          }
          function w() {}
          function N(a, b, e) {
            if (null == a) throw new TypeError("array is null or not defined");
            a = Object(a);
            var d = a.length >>> 0;
            if ("function" !== typeof b)
              throw new TypeError("predicate must be a function");
            for (var k = 0; k < d; ) {
              var h = a[k];
              if (b.call(e, h, k, a)) return h;
              k++;
            }
          }
          function z(a) {
            return a.replace(/[.*"]/g, "_");
          }
          function A(a, b) {
            for (var e = null, d = 0; d < a.length; d++) {
              var k = a[d];
              b && b(k.type) && (!e || e._end < k._end) && (e = k);
            }
            return e;
          }
          function O(a) {
            return A(a, function (a) {
              return -1 === String(a).indexOf("external");
            });
          }
          function P(a) {
            return A(a, function (a) {
              return -1 !== String(a).indexOf("external");
            });
          }
          function Q(a) {
            for (var b = a[0], e = 1; e < a.length; e++) {
              var d = a[e];
              b._start > d._start && (b = d);
            }
            return b;
          }
          function J() {
            return C.now();
          }
          function R(a) {
            return "number" === typeof a && 0 <= a ? a : J();
          }
          function S(a, b) {
            return F(b) || F(a) ? null : parseInt(b - a);
          }
          function T(a) {
            setTimeout(a, 0);
          }
          function U(a) {
            Y.Promise.resolve().then(a);
          }
          function V() {
            return "function" === typeof C.getEntriesByType;
          }
          function W(a) {
            return (
              "undefined" !== typeof PerformanceObserver &&
              PerformanceObserver.supportedEntryTypes &&
              0 <= PerformanceObserver.supportedEntryTypes.indexOf(a)
            );
          }
          function X() {
            if (null != sessionStorage.getItem("_elastic_inspect_beacon_"))
              return !0;
            if (!window.URL || !window.URLSearchParams) return !1;
            try {
              var a = new URL(window.location.href).searchParams.has(
                "_elastic_inspect_beacon_"
              );
              a && sessionStorage.setItem("_elastic_inspect_beacon_", !0);
              return a;
            } catch (aa) {}
            return !1;
          }
          a.r(c);
          a.d(c, {
            extend: function () {
              return y;
            },
            merge: function () {
              return M;
            },
            isUndefined: function () {
              return F;
            },
            noop: function () {
              return w;
            },
            baseExtend: function () {
              return D;
            },
            bytesToHex: function () {
              return p;
            },
            isCORSSupported: function () {
              return n;
            },
            isObject: function () {
              return x;
            },
            isFunction: function () {
              return I;
            },
            isPlatformSupported: function () {
              return h;
            },
            isDtHeaderValid: function () {
              return f;
            },
            parseDtHeaderValue: function () {
              return r;
            },
            getServerTimingInfo: function () {
              return k;
            },
            getDtHeaderValue: function () {
              return l;
            },
            getTSHeaderValue: function () {
              return g;
            },
            getCurrentScript: function () {
              return B;
            },
            getElasticScript: function () {
              return E;
            },
            getTimeOrigin: function () {
              return e;
            },
            generateRandomId: function () {
              return t;
            },
            getEarliestSpan: function () {
              return Q;
            },
            getLatestNonXHRSpan: function () {
              return O;
            },
            getLatestXHRSpan: function () {
              return P;
            },
            getDuration: function () {
              return S;
            },
            getTime: function () {
              return R;
            },
            now: function () {
              return J;
            },
            rng: function () {
              return m;
            },
            checkSameOrigin: function () {
              return b;
            },
            scheduleMacroTask: function () {
              return T;
            },
            scheduleMicroTask: function () {
              return U;
            },
            setLabel: function () {
              return d;
            },
            setRequestHeader: function () {
              return u;
            },
            stripQueryStringFromUrl: function () {
              return v;
            },
            find: function () {
              return N;
            },
            removeInvalidChars: function () {
              return z;
            },
            PERF: function () {
              return C;
            },
            isPerfTimelineSupported: function () {
              return V;
            },
            isBrowser: function () {
              return G;
            },
            isPerfTypeSupported: function () {
              return W;
            },
            isBeaconInspectionEnabled: function () {
              return X;
            },
          });
          var Y = a("../rum-core/dist/es/common/polyfills.js"),
            K = [].slice,
            G = "undefined" !== typeof window,
            C = G && "undefined" !== typeof performance ? performance : {},
            L = [];
          for (q = 0; 256 > q; ++q) L[q] = (q + 256).toString(16).substr(1);
          var H = new Uint8Array(16);
        },
        "../rum-core/dist/es/error-logging/error-logging.js": function (
          q,
          c,
          a
        ) {
          function n(a) {
            var g = !1,
              b = {};
            Object.keys(a).forEach(function (h) {
              if (!(0 <= f.indexOf(h))) {
                var d = a[h];
                if (null != d && "function" !== typeof d) {
                  if ("object" === typeof d) {
                    if ("function" !== typeof d.toISOString) return;
                    d = d.toISOString();
                  }
                  b[h] = d;
                  g = !0;
                }
              }
            });
            if (g) return b;
          }
          a.r(c);
          var p = a("../rum-core/dist/es/error-logging/stack-trace.js"),
            m = a("../rum-core/dist/es/common/utils.js"),
            t = a("../rum-core/dist/es/common/context.js"),
            l = a("../rum-core/dist/es/common/truncate.js"),
            r = ["tags"],
            f = ["stack", "message"];
          q = (function () {
            function a(a, h, d) {
              this._apmServer = a;
              this._configService = h;
              this._transactionService = d;
            }
            var f = a.prototype;
            f.createErrorDataModel = function (a) {
              var b = (0, p.createStackTraces)(a);
              b = (0, p.filterInvalidFrames)(b);
              var d = "(inline script)",
                k = b[b.length - 1];
              k && k.filename && (d = k.filename);
              var e = a.error;
              a = a.message;
              k = "";
              var g = {};
              e &&
                "object" === typeof e &&
                ((a = a || e.message), (k = e.name), (e = n(e))) &&
                (g.custom = e);
              k || (a && -1 < a.indexOf(":") && (k = a.split(":")[0]));
              var f = (e = this._transactionService.getCurrentTransaction())
                  ? e.context
                  : {},
                c = this._configService.get("context");
              if (null == c) c = {};
              else {
                var u = {},
                  q = Object.keys(c),
                  B;
                for (B = 0; B < q.length; B++) {
                  var y = q[B];
                  0 <= r.indexOf(y) || (u[y] = c[y]);
                }
                c = u;
              }
              u = (0, t.getPageContext)();
              g = (0, m.merge)({}, u, f, c, g);
              b = {
                id: (0, m.generateRandomId)(),
                culprit: d,
                exception: { message: a, stacktrace: b, type: k },
                context: g,
              };
              e &&
                (b = (0, m.extend)(b, {
                  trace_id: e.traceId,
                  parent_id: e.id,
                  transaction_id: e.id,
                  transaction: { type: e.type, sampled: e.sampled },
                }));
              return (0, l.truncateModel)(l.ERROR_MODEL, b);
            };
            f.logErrorEvent = function (a) {
              "undefined" !== typeof a &&
                ((a = this.createErrorDataModel(a)),
                "undefined" !== typeof a.exception.message &&
                  this._apmServer.addError(a));
            };
            f.registerListeners = function () {
              var a = this;
              window.addEventListener("error", function (b) {
                return a.logErrorEvent(b);
              });
              window.addEventListener("unhandledrejection", function (b) {
                return a.logPromiseEvent(b);
              });
            };
            f.logPromiseEvent = function (a) {
              a = a.reason;
              null == a && (a = "\x3cno reason specified\x3e");
              this.logErrorEvent(
                "string" === typeof a.message
                  ? {
                      error: a,
                      message:
                        "Unhandled promise rejection: " +
                        (a.name ? a.name + ": " : "") +
                        a.message,
                    }
                  : {
                      message:
                        "Unhandled promise rejection: " +
                        ("object" === typeof a
                          ? "\x3cobject\x3e"
                          : "function" === typeof a
                          ? "\x3cfunction\x3e"
                          : a),
                    }
              );
            };
            f.logError = function (a) {
              var b = {};
              "string" === typeof a ? (b.message = a) : (b.error = a);
              return this.logErrorEvent(b);
            };
            return a;
          })();
          c["default"] = q;
        },
        "../rum-core/dist/es/error-logging/index.js": function (q, c, a) {
          function n() {
            t.serviceCreators[m.ERROR_LOGGING] = function (a) {
              a = a.getService([
                m.APM_SERVER,
                m.CONFIG_SERVICE,
                m.TRANSACTION_SERVICE,
              ]);
              return new p.default(a[0], a[1], a[2]);
            };
          }
          a.r(c);
          a.d(c, {
            registerServices: function () {
              return n;
            },
          });
          var p = a("../rum-core/dist/es/error-logging/error-logging.js"),
            m = a("../rum-core/dist/es/common/constants.js"),
            t = a("../rum-core/dist/es/common/service-factory.js");
        },
        "../rum-core/dist/es/error-logging/stack-trace.js": function (q, c, a) {
          function n(a) {
            return a.map(function (a) {
              if (a.functionName) {
                var f = a.functionName;
                f = f.split("/");
                f = 1 < f.length ? ["Object", f[f.length - 1]].join(".") : f[0];
                f = f.replace(/.<$/gi, ".\x3canonymous\x3e");
                f = f.replace(/^Anonymous function$/, "\x3canonymous\x3e");
                f = f.split(".");
                f = 1 < f.length ? f[f.length - 1] : f[0];
                a.functionName = f;
              }
              return a;
            });
          }
          function p(a) {
            var l = a.error,
              f = a.filename,
              g = a.lineno;
            a = a.colno;
            var c = [];
            if (l)
              try {
                c = t().parse(l);
              } catch (b) {}
            0 === c.length &&
              (c = [{ fileName: f, lineNumber: g, columnNumber: a }]);
            return n(c).map(function (a) {
              var b = a.fileName,
                d = a.lineNumber,
                k = a.columnNumber;
              a = a.functionName;
              a = void 0 === a ? "\x3canonymous\x3e" : a;
              if ((!b && !d) || (!k && !d)) return {};
              var e = b;
              void 0 === e && (e = "");
              "\x3canonymous\x3e" === e && (e = "");
              var g = e;
              var f =
                window.location.origin ||
                window.location.protocol +
                  "//" +
                  window.location.hostname +
                  (window.location.port ? ":" + window.location.port : "");
              -1 < g.indexOf(f) && (g = g.replace(f + "/", ""));
              e = e ? 0 === window.location.href.indexOf(e) : !1;
              e && (g = "(inline script)");
              return {
                abs_path: b,
                filename: g,
                function: a,
                lineno: d,
                colno: k,
              };
            });
          }
          function m(a) {
            return a.filter(function (a) {
              var f = a.lineno;
              return (
                "undefined" !== typeof a.filename && "undefined" !== typeof f
              );
            });
          }
          a.r(c);
          a.d(c, {
            createStackTraces: function () {
              return p;
            },
            filterInvalidFrames: function () {
              return m;
            },
          });
          q = a("../../node_modules/error-stack-parser/error-stack-parser.js");
          var t = a.n(q);
        },
        "../rum-core/dist/es/index.js": function (q, c, a) {
          function n() {
            (0, m.registerServices)();
            (0, p.registerServices)();
            return new t.ServiceFactory();
          }
          a.r(c);
          a.d(c, {
            createServiceFactory: function () {
              return n;
            },
            ServiceFactory: function () {
              return t.ServiceFactory;
            },
            patchAll: function () {
              return r.patchAll;
            },
            patchEventHandler: function () {
              return r.patchEventHandler;
            },
            isPlatformSupported: function () {
              return l.isPlatformSupported;
            },
            isBrowser: function () {
              return l.isBrowser;
            },
            getInstrumentationFlags: function () {
              return b.getInstrumentationFlags;
            },
            createTracer: function () {
              return k.createTracer;
            },
            scheduleMicroTask: function () {
              return l.scheduleMicroTask;
            },
            scheduleMacroTask: function () {
              return l.scheduleMacroTask;
            },
            afterFrame: function () {
              return h.default;
            },
            ERROR: function () {
              return u.ERROR;
            },
            PAGE_LOAD_DELAY: function () {
              return u.PAGE_LOAD_DELAY;
            },
            PAGE_LOAD: function () {
              return u.PAGE_LOAD;
            },
            CONFIG_SERVICE: function () {
              return u.CONFIG_SERVICE;
            },
            LOGGING_SERVICE: function () {
              return u.LOGGING_SERVICE;
            },
            TRANSACTION_SERVICE: function () {
              return u.TRANSACTION_SERVICE;
            },
            APM_SERVER: function () {
              return u.APM_SERVER;
            },
            PERFORMANCE_MONITORING: function () {
              return u.PERFORMANCE_MONITORING;
            },
            ERROR_LOGGING: function () {
              return u.ERROR_LOGGING;
            },
            EVENT_TARGET: function () {
              return u.EVENT_TARGET;
            },
            CLICK: function () {
              return u.CLICK;
            },
            bootstrap: function () {
              return d.bootstrap;
            },
            observePageVisibility: function () {
              return f.observePageVisibility;
            },
            observePageClicks: function () {
              return g.observePageClicks;
            },
          });
          var p = a("../rum-core/dist/es/error-logging/index.js"),
            m = a("../rum-core/dist/es/performance-monitoring/index.js"),
            t = a("../rum-core/dist/es/common/service-factory.js"),
            l = a("../rum-core/dist/es/common/utils.js"),
            r = a("../rum-core/dist/es/common/patching/index.js"),
            f = a("../rum-core/dist/es/common/observers/page-visibility.js"),
            g = a("../rum-core/dist/es/common/observers/page-clicks.js"),
            u = a("../rum-core/dist/es/common/constants.js"),
            b = a("../rum-core/dist/es/common/instrument.js"),
            h = a("../rum-core/dist/es/common/after-frame.js"),
            d = a("../rum-core/dist/es/bootstrap.js"),
            k = a("../rum-core/dist/es/opentracing/index.js");
        },
        "../rum-core/dist/es/opentracing/index.js": function (q, c, a) {
          function n(a) {
            var c = a.getService(t.PERFORMANCE_MONITORING),
              f = a.getService(t.TRANSACTION_SERVICE),
              g = a.getService(t.ERROR_LOGGING);
            a = a.getService(t.LOGGING_SERVICE);
            return new p.default(c, f, a, g);
          }
          a.r(c);
          a.d(c, {
            Span: function () {
              return m.default;
            },
            Tracer: function () {
              return p.default;
            },
            createTracer: function () {
              return n;
            },
          });
          var p = a("../rum-core/dist/es/opentracing/tracer.js"),
            m = a("../rum-core/dist/es/opentracing/span.js"),
            t = a("../rum-core/dist/es/common/constants.js");
        },
        "../rum-core/dist/es/opentracing/span.js": function (q, c, a) {
          function n(a, c) {
            a.prototype = Object.create(c.prototype);
            a.prototype.constructor = a;
            p(a, c);
          }
          function p(a, c) {
            p =
              Object.setPrototypeOf ||
              function (a, g) {
                a.__proto__ = g;
                return a;
              };
            return p(a, c);
          }
          a.r(c);
          q = a("../../node_modules/opentracing/lib/span.js");
          var m = a("../rum-core/dist/es/common/utils.js"),
            t = a("../rum-core/dist/es/performance-monitoring/transaction.js");
          a = (function (a) {
            function c(g, f) {
              var b = a.call(this) || this;
              b.__tracer = g;
              b.span = f;
              b.isTransaction = f instanceof t.default;
              b.spanContext = {
                id: f.id,
                traceId: f.traceId,
                sampled: f.sampled,
              };
              return b;
            }
            n(c, a);
            var f = c.prototype;
            f._context = function () {
              return this.spanContext;
            };
            f._tracer = function () {
              return this.__tracer;
            };
            f._setOperationName = function (a) {
              this.span.name = a;
            };
            f._addTags = function (a) {
              a = (0, m.extend)({}, a);
              a.type && ((this.span.type = a.type), delete a.type);
              if (this.isTransaction) {
                var f = a["user.id"],
                  b = a["user.username"],
                  h = a["user.email"];
                if (f || b || h)
                  this.span.addContext({
                    user: { id: f, username: b, email: h },
                  }),
                    delete a["user.id"],
                    delete a["user.username"],
                    delete a["user.email"];
              }
              this.span.addLabels(a);
            };
            f._log = function (a, f) {
              "error" === a.event &&
                (a["error.object"]
                  ? this.__tracer.errorLogging.logError(a["error.object"])
                  : a.message &&
                    this.__tracer.errorLogging.logError(a.message));
            };
            f._finish = function (a) {
              this.span.end();
              a && (this.span._end = a - (0, m.getTimeOrigin)());
            };
            return c;
          })(q.Span);
          c["default"] = a;
        },
        "../rum-core/dist/es/opentracing/tracer.js": function (q, c, a) {
          function n(a, f) {
            a.prototype = Object.create(f.prototype);
            a.prototype.constructor = a;
            p(a, f);
          }
          function p(a, f) {
            p =
              Object.setPrototypeOf ||
              function (a, h) {
                a.__proto__ = h;
                return a;
              };
            return p(a, f);
          }
          a.r(c);
          q = a("../../node_modules/opentracing/lib/tracer.js");
          var m = a("../../node_modules/opentracing/lib/constants.js"),
            t = a("../../node_modules/opentracing/lib/span.js"),
            l = a("../rum-core/dist/es/common/utils.js"),
            r = a("../rum-core/dist/es/state.js"),
            f = a("../rum-core/dist/es/opentracing/span.js");
          a = (function (a) {
            function g(b, d, k, e) {
              var h = a.call(this) || this;
              h.performanceMonitoring = b;
              h.transactionService = d;
              h.loggingService = k;
              h.errorLogging = e;
              return h;
            }
            n(g, a);
            var b = g.prototype;
            b._startSpan = function (a, b) {
              var d = { managed: !0 };
              if (b)
                if (((d.timestamp = b.startTime), b.childOf))
                  d.parentId = b.childOf.id;
                else if (b.references && 0 < b.references.length) {
                  1 < b.references.length &&
                    r.__DEV__ &&
                    this.loggingService.debug(
                      "Elastic APM OpenTracing: Unsupported number of references, only the first childOf reference will be recorded."
                    );
                  var e = (0, l.find)(b.references, function (a) {
                    return a.type() === m.REFERENCE_CHILD_OF;
                  });
                  e && (d.parentId = e.referencedContext().id);
                }
              a = this.transactionService.getCurrentTransaction()
                ? this.transactionService.startSpan(a, void 0, d)
                : this.transactionService.startTransaction(a, void 0, d);
              if (!a) return new t.Span();
              d.timestamp && (a._start = d.timestamp - (0, l.getTimeOrigin)());
              d = new f.default(this, a);
              b && b.tags && d.addTags(b.tags);
              return d;
            };
            b._inject = function (a, b, k) {
              switch (b) {
                case m.FORMAT_TEXT_MAP:
                case m.FORMAT_HTTP_HEADERS:
                  this.performanceMonitoring.injectDtHeader(a, k);
                  break;
                case m.FORMAT_BINARY:
                  r.__DEV__ &&
                    this.loggingService.debug(
                      "Elastic APM OpenTracing: binary carrier format is not supported."
                    );
              }
            };
            b._extract = function (a, b) {
              switch (a) {
                case m.FORMAT_TEXT_MAP:
                case m.FORMAT_HTTP_HEADERS:
                  var d = this.performanceMonitoring.extractDtHeader(b);
                  break;
                case m.FORMAT_BINARY:
                  r.__DEV__ &&
                    this.loggingService.debug(
                      "Elastic APM OpenTracing: binary carrier format is not supported."
                    );
              }
              d || (d = null);
              return d;
            };
            return g;
          })(q.Tracer);
          c["default"] = a;
        },
        "../rum-core/dist/es/performance-monitoring/breakdown.js": function (
          q,
          c,
          a
        ) {
          function n(a) {
            var f = a.spans,
              b = a._start,
              h = a._end;
            if (0 === f.length) return a.duration();
            f.sort(function (a, b) {
              return a._start - b._start;
            });
            a = f[0];
            var d = a._end,
              k = a._start,
              e = d;
            b = k - b;
            for (var g = 1; g < f.length; g++)
              (a = f[g]),
                (k = a._start),
                (d = a._end),
                k > e ? ((b += k - e), (e = d)) : d > e && (e = d);
            e < h && (b += h - e);
            return b;
          }
          function p(a) {
            var f = {},
              b = n(a);
            f.app = { count: 1, duration: b };
            a = a.spans;
            for (b = 0; b < a.length; b++) {
              var h = a[b],
                d = h.duration();
              if (0 !== d && null != d) {
                var k = h.subtype;
                h = h.type.replace(r.TRUNCATED_TYPE, "");
                k && (h += "." + k);
                f[h] || (f[h] = { duration: 0, count: 0 });
                f[h].count++;
                f[h].duration += d;
              }
            }
            return f;
          }
          function m(a, f) {
            var b = f.count;
            return {
              transaction: a,
              span: f.details,
              samples: {
                "span.self_time.count": { value: void 0 === b ? 1 : b },
                "span.self_time.sum.us": { value: f.duration },
              },
            };
          }
          function t(a, c) {
            void 0 === c && (c = l.PERF.timing);
            var b = [],
              h = a.duration(),
              d = a.type,
              k = a.sampled,
              e = { name: a.name, type: d };
            b.push({
              transaction: e,
              samples: {
                "transaction.duration.count": { value: 1 },
                "transaction.duration.sum.us": { value: h },
                "transaction.breakdown.count": { value: k ? 1 : 0 },
              },
            });
            if (!k) return b;
            if (d === r.PAGE_LOAD && c)
              for (a = 0; a < f.length; a++)
                (h = f[a]),
                  (d = c[h[0]]),
                  (k = c[h[1]]),
                  (d = (0, l.getDuration)(d, k)),
                  0 !== d &&
                    null != d &&
                    b.push(m(e, { details: { type: h[2] }, duration: d }));
            else {
              var g = p(a);
              Object.keys(g).forEach(function (a) {
                var d = a.split(".");
                a = g[a];
                b.push(
                  m(e, {
                    details: { type: d[0], subtype: d[1] },
                    duration: a.duration,
                    count: a.count,
                  })
                );
              });
            }
            return b;
          }
          a.r(c);
          a.d(c, {
            captureBreakdown: function () {
              return t;
            },
          });
          var l = a("../rum-core/dist/es/common/utils.js"),
            r = a("../rum-core/dist/es/common/constants.js"),
            f = [
              ["domainLookupStart", "domainLookupEnd", "DNS"],
              ["connectStart", "connectEnd", "TCP"],
              ["requestStart", "responseStart", "Request"],
              ["responseStart", "responseEnd", "Response"],
              ["domLoading", "domComplete", "Processing"],
              ["loadEventStart", "loadEventEnd", "Load"],
            ];
        },
        "../rum-core/dist/es/performance-monitoring/capture-navigation.js":
          function (q, c, a) {
            function n(a, e, d, k, f) {
              void 0 === f && (f = 0);
              return (
                "number" === typeof a &&
                "number" === typeof e &&
                a >= f &&
                e > a &&
                a - f >= d &&
                e - f <= k &&
                e - a < b.MAX_SPAN_DURATION &&
                a - f < b.MAX_SPAN_DURATION &&
                e - f < b.MAX_SPAN_DURATION
              );
            }
            function p(a, b, e, d) {
              for (var f = [], h = 0; h < k.length; h++) {
                var c = a[k[h][0]],
                  g = a[k[h][1]];
                if (n(c, g, e, d, b)) {
                  var l = new u.default(
                      k[h][2],
                      "hard-navigation.browser-timing"
                    ),
                    v = null;
                  "requestStart" === k[h][0] &&
                    ((l.pageResponse = !0), (v = { url: location.origin }));
                  l._start = c - b;
                  l.end(g - b, v);
                  f.push(l);
                }
              }
              return f;
            }
            function m(a) {
              var b = a.name,
                e = a.initiatorType,
                d = a.startTime,
                k = a.responseEnd,
                f = "resource";
              e && (f += "." + e);
              e = (0, h.stripQueryStringFromUrl)(b);
              f = new u.default(e, f);
              f._start = d;
              f.end(k, { url: b, entry: a });
              return f;
            }
            function t(a, e, d, f) {
              for (var k = [], h = 0; h < a.length; h++) {
                var c = a[h],
                  g = c.initiatorType,
                  l = c.name,
                  v = c.startTime;
                c = c.responseEnd;
                -1 !== b.RESOURCE_INITIATOR_TYPES.indexOf(g) &&
                  null != l &&
                  (("xmlhttprequest" !== g && "fetch" !== g) ||
                    !(
                      /intake\/v\d+\/rum\/events/.test(l) ||
                      (null != e && v > e)
                    )) &&
                  n(v, c, d, f) &&
                  k.push(m(a[h]));
              }
              return k;
            }
            function l(a, e, d) {
              for (var f = [], k = 0; k < a.length; k++) {
                var h = a[k],
                  c = h.name,
                  g = h.startTime,
                  l = h.duration;
                h = g + l;
                l <= b.USER_TIMING_THRESHOLD ||
                  !n(g, h, e, d) ||
                  ((c = new u.default(c, "app")),
                  (c._start = g),
                  c.end(h),
                  f.push(c));
              }
              return f;
            }
            function r(a) {
              var b = a.fetchStart,
                d = a.responseStart,
                f = a.responseEnd;
              if (b >= a.navigationStart && d >= b && f >= d) {
                var k = {};
                e.forEach(function (e) {
                  var d = a[e];
                  d && d >= b && (k[e] = parseInt(d - b));
                });
                return k;
              }
              return null;
            }
            function f(a) {
              a = r(a);
              return null == a
                ? null
                : {
                    navigationTiming: a,
                    agent: {
                      timeToFirstByte: a.responseStart,
                      domInteractive: a.domInteractive,
                      domComplete: a.domComplete,
                    },
                  };
            }
            function g(a) {
              if (a.captureTimings) {
                var e = a._end;
                if (a.type === b.PAGE_LOAD) {
                  if (a.marks && a.marks.custom) {
                    var k = a.marks.custom;
                    Object.keys(k).forEach(function (b) {
                      k[b] += a._start;
                    });
                  }
                  a._start = 0;
                  var c = h.PERF.timing;
                  p(c, c.fetchStart, 0, e).forEach(function (b) {
                    b.traceId = a.traceId;
                    b.sampled = a.sampled;
                    b.pageResponse &&
                      a.options.pageLoadSpanId &&
                      (b.id = a.options.pageLoadSpanId);
                    a.spans.push(b);
                  });
                  a.addMarks(f(c));
                }
                if ((0, h.isPerfTimelineSupported)()) {
                  c = a._start;
                  var g = h.PERF.getEntriesByType(b.RESOURCE);
                  t(g, d.state.bootstrapTime, c, e).forEach(function (b) {
                    return a.spans.push(b);
                  });
                  g = h.PERF.getEntriesByType(b.MEASURE);
                  l(g, c, e).forEach(function (b) {
                    return a.spans.push(b);
                  });
                }
              }
            }
            a.r(c);
            a.d(c, {
              getPageLoadMarks: function () {
                return f;
              },
              captureNavigation: function () {
                return g;
              },
              createNavigationTimingSpans: function () {
                return p;
              },
              createResourceTimingSpans: function () {
                return t;
              },
              createUserTimingSpans: function () {
                return l;
              },
              NAVIGATION_TIMING_MARKS: function () {
                return e;
              },
              COMPRESSED_NAV_TIMING_MARKS: function () {
                return v;
              },
            });
            var u = a("../rum-core/dist/es/performance-monitoring/span.js"),
              b = a("../rum-core/dist/es/common/constants.js"),
              h = a("../rum-core/dist/es/common/utils.js"),
              d = a("../rum-core/dist/es/state.js"),
              k = [
                ["domainLookupStart", "domainLookupEnd", "Domain lookup"],
                [
                  "connectStart",
                  "connectEnd",
                  "Making a connection to the server",
                ],
                [
                  "requestStart",
                  "responseEnd",
                  "Requesting and receiving the document",
                ],
                [
                  "domLoading",
                  "domInteractive",
                  "Parsing the document, executing sync. scripts",
                ],
                [
                  "domContentLoadedEventStart",
                  "domContentLoadedEventEnd",
                  'Fire "DOMContentLoaded" event',
                ],
                ["loadEventStart", "loadEventEnd", 'Fire "load" event'],
              ],
              e =
                "fetchStart domainLookupStart domainLookupEnd connectStart connectEnd requestStart responseStart responseEnd domLoading domInteractive domContentLoadedEventStart domContentLoadedEventEnd domComplete loadEventStart loadEventEnd".split(
                  " "
                ),
              v = "fs ls le cs ce qs rs re dl di ds de dc es ee".split(" ");
          },
        "../rum-core/dist/es/performance-monitoring/index.js": function (
          q,
          c,
          a
        ) {
          function n() {
            l.serviceCreators[t.TRANSACTION_SERVICE] = function (a) {
              a = a.getService([t.LOGGING_SERVICE, t.CONFIG_SERVICE]);
              return new m.default(a[0], a[1]);
            };
            l.serviceCreators[t.PERFORMANCE_MONITORING] = function (a) {
              a = a.getService([
                t.APM_SERVER,
                t.CONFIG_SERVICE,
                t.LOGGING_SERVICE,
                t.TRANSACTION_SERVICE,
              ]);
              return new p.default(a[0], a[1], a[2], a[3]);
            };
          }
          a.r(c);
          a.d(c, {
            registerServices: function () {
              return n;
            },
          });
          var p = a(
              "../rum-core/dist/es/performance-monitoring/performance-monitoring.js"
            ),
            m = a(
              "../rum-core/dist/es/performance-monitoring/transaction-service.js"
            ),
            t = a("../rum-core/dist/es/common/constants.js"),
            l = a("../rum-core/dist/es/common/service-factory.js");
        },
        "../rum-core/dist/es/performance-monitoring/metrics.js": function (
          q,
          c,
          a
        ) {
          function n(a, b) {
            for (var e = [], d = 0; d < a.length; d++) {
              var k = a[d],
                h = k.startTime,
                c = k.duration,
                g = k.attribution,
                l = h + c;
              k = new u.default("Longtask(" + k.name + ")", f.LONG_TASK, {
                startTime: h,
              });
              b.count++;
              b.duration += c;
              b.max = Math.max(c, b.max);
              0 < g.length &&
                ((h = g[0]),
                (c = h.containerName),
                (g = h.containerId),
                (h = { attribution: h.name, type: h.containerType }),
                c && (h.name = c),
                g && (h.id = g),
                k.addContext({ custom: h }));
              k.end(l);
              e.push(k);
            }
            return e;
          }
          function p(a) {
            var b = a[0];
            if (b)
              return (
                (a = b.processingStart),
                (b = new u.default("First Input Delay", f.FIRST_INPUT, {
                  startTime: b.startTime,
                })),
                b.end(a),
                b
              );
          }
          function m(a) {
            var b = a.start;
            a = a.duration;
            var d = new u.default("Total Blocking Time", f.LONG_TASK, {
              startTime: b,
            });
            d.end(b + a);
            return d;
          }
          function t(a) {
            a.forEach(function (a) {
              var e = a.name,
                d = a.startTime;
              a = a.duration;
              d < b.fcp ||
                ("self" !== e && -1 === e.indexOf("same-origin")) ||
                ((b.tbt.start = Math.min(b.tbt.start, d)),
                (e = a - h),
                0 < e && (b.tbt.duration += e));
            });
          }
          function l(a) {
            a.forEach(function (a) {
              if (!a.hadRecentInput && a.value) {
                if (
                  5e3 < a.startTime - b.cls.firstEntryTime ||
                  1e3 < a.startTime - b.cls.prevEntryTime
                )
                  (b.cls.firstEntryTime = a.startTime),
                    (b.cls.currentSessionScore = 0);
                b.cls.prevEntryTime = a.startTime;
                b.cls.currentSessionScore += a.value;
                b.cls.score = Math.max(b.cls.score, b.cls.currentSessionScore);
              }
            });
          }
          function r(a, e) {
            var d = e.isHardNavigation,
              h = e.trStart,
              k = a.getEntriesByType(f.LONG_TASK).filter(function (a) {
                return a.startTime >= h;
              });
            e = { spans: n(k, b.longtask), marks: {} };
            if (!d) return e;
            d = a.getEntriesByType(f.LARGEST_CONTENTFUL_PAINT);
            if ((d = d[d.length - 1]))
              (d = parseInt(d.startTime)),
                (b.lcp = d),
                (e.marks.largestContentfulPaint = d);
            d = g.PERF.timing;
            d = d.fetchStart - d.navigationStart;
            var c = a.getEntriesByName(f.FIRST_CONTENTFUL_PAINT)[0];
            c &&
              ((d = parseInt(0 <= d ? c.startTime - d : c.startTime)),
              (b.fcp = d),
              (e.marks.firstContentfulPaint = d));
            d = a.getEntriesByType(f.FIRST_INPUT);
            if ((d = p(d))) (b.fid = d.duration()), e.spans.push(d);
            t(k);
            a = a.getEntriesByType(f.LAYOUT_SHIFT);
            l(a);
            return e;
          }
          a.r(c);
          a.d(c, {
            metrics: function () {
              return b;
            },
            createLongTaskSpans: function () {
              return n;
            },
            createFirstInputDelaySpan: function () {
              return p;
            },
            createTotalBlockingTimeSpan: function () {
              return m;
            },
            calculateTotalBlockingTime: function () {
              return t;
            },
            calculateCumulativeLayoutShift: function () {
              return l;
            },
            captureObserverEntries: function () {
              return r;
            },
            PerfEntryRecorder: function () {
              return d;
            },
          });
          var f = a("../rum-core/dist/es/common/constants.js"),
            g = a("../rum-core/dist/es/common/utils.js"),
            u = a("../rum-core/dist/es/performance-monitoring/span.js"),
            b = {
              fid: 0,
              fcp: 0,
              tbt: { start: Infinity, duration: 0 },
              cls: {
                score: 0,
                firstEntryTime: Number.NEGATIVE_INFINITY,
                prevEntryTime: Number.NEGATIVE_INFINITY,
                currentSessionScore: 0,
              },
              longtask: { count: 0, duration: 0, max: 0 },
            },
            h = 50,
            d = (function () {
              function a(a) {
                this.po = { observe: g.noop, disconnect: g.noop };
                window.PerformanceObserver &&
                  (this.po = new PerformanceObserver(a));
              }
              var b = a.prototype;
              b.start = function (a) {
                try {
                  this.po.observe({ type: a, buffered: !0 });
                } catch (x) {}
              };
              b.stop = function () {
                this.po.disconnect();
              };
              return a;
            })();
        },
        "../rum-core/dist/es/performance-monitoring/performance-monitoring.js":
          function (q, c, a) {
            function n(a, b, e) {
              a.sort(function (a, b) {
                return a._start - b._start;
              });
              var d = [],
                f = 1;
              a.forEach(function (h, k) {
                if (0 === d.length) d.push(h);
                else {
                  var c = d[d.length - 1],
                    g =
                      c.type === h.type &&
                      c.subtype === h.subtype &&
                      c.action === h.action &&
                      c.name === h.name &&
                      h.duration() / b < e &&
                      (h._start - c._end) / b < e;
                  k = a.length === k + 1;
                  g && (f++, (c._end = h._end));
                  1 < f && (!g || k) && ((c.name = f + "x " + c.name), (f = 1));
                  g || d.push(h);
                }
              });
              return d;
            }
            function p(a) {
              if (a.sampled) {
                var d = a.spans.filter(function (b) {
                  return (
                    0 < b.duration() && b._start >= a._start && b._end <= a._end
                  );
                });
                if (a.isManaged()) {
                  var e = a.duration();
                  d = n(d, e, b);
                  a.spans = d;
                } else a.spans = d;
              } else a.resetFields();
              return a;
            }
            a.r(c);
            a.d(c, {
              groupSmallContinuouslySimilarSpans: function () {
                return n;
              },
              adjustTransaction: function () {
                return p;
              },
              default: function () {
                return h;
              },
            });
            var m = a("../rum-core/dist/es/common/utils.js"),
              t = a("../rum-core/dist/es/common/url.js"),
              l = a("../rum-core/dist/es/common/patching/index.js"),
              r = a("../rum-core/dist/es/common/patching/patch-utils.js"),
              f = a("../rum-core/dist/es/common/constants.js"),
              g = a("../rum-core/dist/es/common/truncate.js"),
              u = a("../rum-core/dist/es/state.js"),
              b = 0.05,
              h = (function () {
                function a(a, b, d, f) {
                  this._apmServer = a;
                  this._configService = b;
                  this._logginService = d;
                  this._transactionService = f;
                }
                var b = a.prototype;
                b.init = function (a) {
                  var b = this;
                  void 0 === a && (a = {});
                  this._configService.events.observe(
                    f.TRANSACTION_END + f.AFTER_EVENT,
                    function (a) {
                      if ((a = b.createTransactionPayload(a)))
                        b._apmServer.addTransaction(a),
                          b._configService.dispatchEvent(
                            f.QUEUE_ADD_TRANSACTION
                          );
                    }
                  );
                  a[f.HISTORY] &&
                    l.patchEventHandler.observe(
                      f.HISTORY,
                      this.getHistorySub()
                    );
                  a[f.XMLHTTPREQUEST] &&
                    l.patchEventHandler.observe(
                      f.XMLHTTPREQUEST,
                      this.getXHRSub()
                    );
                  a[f.FETCH] &&
                    l.patchEventHandler.observe(f.FETCH, this.getFetchSub());
                };
                b.getHistorySub = function () {
                  var a = this._transactionService;
                  return function (b, e) {
                    e.source === f.HISTORY &&
                      b === f.INVOKE &&
                      a.startTransaction(e.data.title, "route-change", {
                        managed: !0,
                        canReuse: !0,
                      });
                  };
                };
                b.getXHRSub = function () {
                  var a = this;
                  return function (b, e) {
                    e.source !== f.XMLHTTPREQUEST ||
                      r.globalState.fetchInProgress ||
                      a.processAPICalls(b, e);
                  };
                };
                b.getFetchSub = function () {
                  var a = this;
                  return function (b, e) {
                    e.source === f.FETCH && a.processAPICalls(b, e);
                  };
                };
                b.processAPICalls = function (a, b) {
                  var e = this._configService,
                    d = this._transactionService;
                  if (b.data && b.data.url) {
                    var h = this._apmServer.getEndpoints();
                    if (
                      Object.keys(h).some(function (a) {
                        return -1 !== b.data.url.indexOf(h[a]);
                      })
                    )
                      return;
                  }
                  if (a === f.SCHEDULE && b.data) {
                    a = b.data;
                    var k = new t.Url(a.url),
                      c =
                        a.method +
                        " " +
                        (k.relative
                          ? k.path
                          : (0, m.stripQueryStringFromUrl)(k.href));
                    d.getCurrentTransaction() ||
                      d.startTransaction(c, f.HTTP_REQUEST_TYPE, {
                        managed: !0,
                      });
                    if (
                      (d = d.startSpan(c, "external.http", { blocking: !0 }))
                    ) {
                      c = e.get("distributedTracing");
                      var g = e.get("distributedTracingOrigins"),
                        l = new t.Url(window.location.href);
                      g =
                        (0, m.checkSameOrigin)(k.origin, l.origin) ||
                        (0, m.checkSameOrigin)(k.origin, g);
                      var r = a.target;
                      c && g && r
                        ? (this.injectDtHeader(d, r),
                          e.get("propagateTracestate") &&
                            this.injectTSHeader(d, r))
                        : u.__DEV__ &&
                          this._logginService.debug(
                            "Could not inject distributed tracing header to the request origin ('" +
                              k.origin +
                              "') from the current origin ('" +
                              l.origin +
                              "')"
                          );
                      a.sync && (d.sync = a.sync);
                      a.span = d;
                    }
                  } else
                    a === f.INVOKE &&
                      (e = b.data) &&
                      e.span &&
                      ((a = e.span),
                      (k = e.response),
                      (c = e.target),
                      (k = k ? k.status : c.status),
                      (k =
                        "abort" == e.status || e.aborted
                          ? f.OUTCOME_UNKNOWN
                          : 400 <= k || 0 == k
                          ? f.OUTCOME_FAILURE
                          : f.OUTCOME_SUCCESS),
                      (a.outcome = k),
                      (c = d.getCurrentTransaction()) &&
                        c.type === f.HTTP_REQUEST_TYPE &&
                        (c.outcome = k),
                      d.endSpan(a, e));
                };
                b.injectDtHeader = function (a, b) {
                  var e = this._configService.get(
                    "distributedTracingHeaderName"
                  );
                  a = (0, m.getDtHeaderValue)(a);
                  (0, m.isDtHeaderValid)(a) &&
                    a &&
                    e &&
                    (0, m.setRequestHeader)(b, e, a);
                };
                b.injectTSHeader = function (a, b) {
                  (a = (0, m.getTSHeaderValue)(a)) &&
                    (0, m.setRequestHeader)(b, "tracestate", a);
                };
                b.extractDtHeader = function (a) {
                  var b = this._configService.get(
                    "distributedTracingHeaderName"
                  );
                  if (a) return (0, m.parseDtHeaderValue)(a[b]);
                };
                b.filterTransaction = function (a) {
                  var b = a.duration();
                  if (!b)
                    return (
                      u.__DEV__ &&
                        ((a =
                          "transaction(" +
                          a.id +
                          ", " +
                          a.name +
                          ") was discarded! "),
                        this._logginService.debug(
                          0 === b
                            ? a + "Transaction duration is 0"
                            : a + "Transaction wasn't ended"
                        )),
                      !1
                    );
                  if (a.isManaged()) {
                    if (6e4 < b)
                      return (
                        u.__DEV__ &&
                          this._logginService.debug(
                            "transaction(" +
                              a.id +
                              ", " +
                              a.name +
                              ") was discarded! Transaction duration (" +
                              b +
                              ") is greater than managed transaction threshold (60000)"
                          ),
                        !1
                      );
                    if (a.sampled && 0 === a.spans.length)
                      return (
                        u.__DEV__ &&
                          this._logginService.debug(
                            "transaction(" +
                              a.id +
                              ", " +
                              a.name +
                              ") was discarded! Transaction does not have any spans"
                          ),
                        !1
                      );
                  }
                  return !0;
                };
                b.createTransactionDataModel = function (a) {
                  var b = a._start,
                    d = a.spans.map(function (d) {
                      d = {
                        id: d.id,
                        transaction_id: a.id,
                        parent_id: d.parentId || a.id,
                        trace_id: a.traceId,
                        name: d.name,
                        type: d.type,
                        subtype: d.subtype,
                        action: d.action,
                        sync: d.sync,
                        start: parseInt(d._start - b),
                        duration: d.duration(),
                        context: d.context,
                        outcome: d.outcome,
                        sample_rate: d.sampleRate,
                      };
                      return (0, g.truncateModel)(g.SPAN_MODEL, d);
                    });
                  d = {
                    id: a.id,
                    trace_id: a.traceId,
                    session: a.session,
                    name: a.name,
                    type: a.type,
                    duration: a.duration(),
                    spans: d,
                    context: a.context,
                    marks: a.marks,
                    breakdown: a.breakdownTimings,
                    span_count: { started: d.length },
                    sampled: a.sampled,
                    sample_rate: a.sampleRate,
                    experience: a.experience,
                    outcome: a.outcome,
                  };
                  return (0, g.truncateModel)(g.TRANSACTION_MODEL, d);
                };
                b.createTransactionPayload = function (a) {
                  var b = p(a);
                  if (this.filterTransaction(b))
                    return this.createTransactionDataModel(a);
                };
                return a;
              })();
          },
        "../rum-core/dist/es/performance-monitoring/span-base.js": function (
          q,
          c,
          a
        ) {
          a.r(c);
          var n = a("../rum-core/dist/es/common/utils.js"),
            p = a("../rum-core/dist/es/common/constants.js");
          q = (function () {
            function a(a, c, f) {
              void 0 === f && (f = {});
              a || (a = p.NAME_UNKNOWN);
              c || (c = p.TYPE_CUSTOM);
              this.name = a;
              this.type = c;
              this.options = f;
              this.id = f.id || (0, n.generateRandomId)(16);
              this.traceId = f.traceId;
              this.sampled = f.sampled;
              this.sampleRate = f.sampleRate;
              this.timestamp = f.timestamp;
              this._start = (0, n.getTime)(f.startTime);
              this._end = void 0;
              this.ended = !1;
              this.outcome = void 0;
              this.onEnd = f.onEnd;
            }
            var c = a.prototype;
            c.ensureContext = function () {
              this.context || (this.context = {});
            };
            c.addLabels = function (a) {
              this.ensureContext();
              var c = this.context;
              c.tags || (c.tags = {});
              Object.keys(a).forEach(function (f) {
                return (0, n.setLabel)(f, a[f], c.tags);
              });
            };
            c.addContext = function () {
              for (var a = arguments.length, c = Array(a), f = 0; f < a; f++)
                c[f] = arguments[f];
              0 !== c.length &&
                (this.ensureContext(),
                n.merge.apply(void 0, [this.context].concat(c)));
            };
            c.end = function (a) {
              this.ended ||
                ((this.ended = !0),
                (this._end = (0, n.getTime)(a)),
                this.callOnEnd());
            };
            c.callOnEnd = function () {
              if ("function" === typeof this.onEnd) this.onEnd(this);
            };
            c.duration = function () {
              return (0, n.getDuration)(this._start, this._end);
            };
            return a;
          })();
          c["default"] = q;
        },
        "../rum-core/dist/es/performance-monitoring/span.js": function (
          q,
          c,
          a
        ) {
          function n(a, c) {
            a.prototype = Object.create(c.prototype);
            a.prototype.constructor = a;
            p(a, c);
          }
          function p(a, c) {
            p =
              Object.setPrototypeOf ||
              function (a, f) {
                a.__proto__ = f;
                return a;
              };
            return p(a, c);
          }
          a.r(c);
          q = a("../rum-core/dist/es/performance-monitoring/span-base.js");
          var m = a("../rum-core/dist/es/common/context.js");
          a = (function (a) {
            function c(c, f, g) {
              c = a.call(this, c, f, g) || this;
              c.parentId = c.options.parentId;
              c.subtype = void 0;
              c.action = void 0;
              -1 !== c.type.indexOf(".") &&
                ((f = c.type.split(".", 3)),
                (c.type = f[0]),
                (c.subtype = f[1]),
                (c.action = f[2]));
              c.sync = c.options.sync;
              return c;
            }
            n(c, a);
            c.prototype.end = function (c, f) {
              a.prototype.end.call(this, c);
              (0, m.addSpanContext)(this, f);
            };
            return c;
          })(q.default);
          c["default"] = a;
        },
        "../rum-core/dist/es/performance-monitoring/transaction-service.js":
          function (q, c, a) {
            a.r(c);
            var n = a("../rum-core/dist/es/common/polyfills.js"),
              p = a(
                "../rum-core/dist/es/performance-monitoring/transaction.js"
              ),
              m = a("../rum-core/dist/es/performance-monitoring/metrics.js"),
              t = a("../rum-core/dist/es/common/utils.js"),
              l = a(
                "../rum-core/dist/es/performance-monitoring/capture-navigation.js"
              ),
              r = a("../rum-core/dist/es/common/constants.js"),
              f = a("../rum-core/dist/es/common/context.js"),
              g = a("../rum-core/dist/es/state.js"),
              u = a("../rum-core/dist/es/common/url.js");
            q = (function () {
              function a(a, b) {
                var d = this;
                this._config = b;
                this._logger = a;
                this.respIntervalId = this.currentTransaction = void 0;
                this.recorder = new m.PerfEntryRecorder(function (a) {
                  var b = d.getCurrentTransaction();
                  if (b && b.captureTimings) {
                    var e,
                      c = b.type === r.PAGE_LOAD;
                    c = (0, m.captureObserverEntries)(a, {
                      isHardNavigation: c,
                      trStart: c ? 0 : b._start,
                    });
                    a = c.spans;
                    c = c.marks;
                    (e = b.spans).push.apply(e, a);
                    b.addMarks({ agent: c });
                  }
                });
              }
              var c = a.prototype;
              c.createCurrentTransaction = function (a, b, e) {
                return (this.currentTransaction = a = new p.default(a, b, e));
              };
              c.getCurrentTransaction = function () {
                if (this.currentTransaction && !this.currentTransaction.ended)
                  return this.currentTransaction;
              };
              c.createOptions = function (a) {
                var b = this._config.config,
                  d = { transactionSampleRate: b.transactionSampleRate };
                a = (0, t.extend)(d, a);
                a.managed &&
                  (a = (0, t.extend)(
                    {
                      pageLoadTraceId: b.pageLoadTraceId,
                      pageLoadSampled: b.pageLoadSampled,
                      pageLoadSpanId: b.pageLoadSpanId,
                      pageLoadTransactionName: b.pageLoadTransactionName,
                    },
                    a
                  ));
                return a;
              };
              c.startManagedTransaction = function (a, b, e) {
                var d = this.getCurrentTransaction(),
                  c = !1;
                if (d)
                  if (d.canReuse() && e.canReuse) {
                    c = d.type;
                    var f = r.TRANSACTION_TYPE_ORDER.indexOf(d.type),
                      h = r.TRANSACTION_TYPE_ORDER.indexOf(b);
                    0 <= f && h < f && (c = b);
                    g.__DEV__ &&
                      this._logger.debug(
                        "redefining transaction(" +
                          d.id +
                          ", " +
                          d.name +
                          ", " +
                          d.type +
                          ")",
                        "to",
                        "(" + (a || d.name) + ", " + c + ")",
                        d
                      );
                    d.redefine(a, c, e);
                    c = !0;
                  } else
                    g.__DEV__ &&
                      this._logger.debug(
                        "ending previous transaction(" +
                          d.id +
                          ", " +
                          d.name +
                          ")",
                        d
                      ),
                      d.end(),
                      (d = this.createCurrentTransaction(a, b, e));
                else d = this.createCurrentTransaction(a, b, e);
                d.type === r.PAGE_LOAD &&
                  (c ||
                    (this.recorder.start(r.LARGEST_CONTENTFUL_PAINT),
                    this.recorder.start(r.PAINT),
                    this.recorder.start(r.FIRST_INPUT),
                    this.recorder.start(r.LAYOUT_SHIFT)),
                  e.pageLoadTraceId && (d.traceId = e.pageLoadTraceId),
                  e.pageLoadSampled && (d.sampled = e.pageLoadSampled),
                  d.name === r.NAME_UNKNOWN &&
                    e.pageLoadTransactionName &&
                    (d.name = e.pageLoadTransactionName));
                !c &&
                  this._config.get("monitorLongtasks") &&
                  this.recorder.start(r.LONG_TASK);
                d.sampled && (d.captureTimings = !0);
                return d;
              };
              c.startTransaction = function (a, b, e) {
                var d = this;
                e = this.createOptions(e);
                var c = !0;
                if (e.managed) {
                  var f = this.currentTransaction;
                  var h = this.startManagedTransaction(a, b, e);
                  f === h && (c = !1);
                } else h = new p.default(a, b, e);
                h.onEnd = function () {
                  return d.handleTransactionEnd(h);
                };
                c &&
                  (g.__DEV__ &&
                    this._logger.debug(
                      "startTransaction(" +
                        h.id +
                        ", " +
                        h.name +
                        ", " +
                        h.type +
                        ")"
                    ),
                  this._config.events.send(r.TRANSACTION_START, [h]));
                return h;
              };
              c.handleTransactionEnd = function (a) {
                var b = this;
                this.recorder.stop();
                var d = window.location.href;
                return n.Promise.resolve().then(
                  function () {
                    var e = a.name,
                      c = a.type;
                    if (g.state.lastHiddenStart >= a._start)
                      g.__DEV__ &&
                        b._logger.debug(
                          "transaction(" +
                            a.id +
                            ", " +
                            e +
                            ", " +
                            c +
                            ") was discarded! The page was hidden during the transaction!"
                        );
                    else if (
                      b.shouldIgnoreTransaction(e) ||
                      c === r.TEMPORARY_TYPE
                    )
                      g.__DEV__ &&
                        b._logger.debug(
                          "transaction(" +
                            a.id +
                            ", " +
                            e +
                            ", " +
                            c +
                            ") is ignored"
                        );
                    else {
                      if (c === r.PAGE_LOAD) {
                        c = b._config.get("pageLoadTransactionName");
                        e === r.NAME_UNKNOWN && c && (a.name = c);
                        if (a.captureTimings) {
                          e = m.metrics.cls;
                          c = m.metrics.fid;
                          var h = m.metrics.tbt,
                            k = m.metrics.longtask;
                          0 < h.duration &&
                            a.spans.push((0, m.createTotalBlockingTimeSpan)(h));
                          a.experience = {};
                          (0, t.isPerfTypeSupported)(r.LONG_TASK) &&
                            (a.experience.tbt = h.duration);
                          (0, t.isPerfTypeSupported)(r.LAYOUT_SHIFT) &&
                            (a.experience.cls = e.score);
                          0 < c && (a.experience.fid = c);
                          0 < k.count &&
                            (a.experience.longtask = {
                              count: k.count,
                              sum: k.duration,
                              max: k.max,
                            });
                        }
                        b.setSession(a);
                      }
                      a.name === r.NAME_UNKNOWN &&
                        (a.name = (0, u.slugifyUrl)(d));
                      (0, l.captureNavigation)(a);
                      b.adjustTransactionTime(a);
                      b._config.get("breakdownMetrics") && a.captureBreakdown();
                      e = b._config.get("context");
                      (0, f.addTransactionContext)(a, e);
                      b._config.events.send(r.TRANSACTION_END, [a]);
                      g.__DEV__ &&
                        b._logger.debug(
                          "end transaction(" +
                            a.id +
                            ", " +
                            a.name +
                            ", " +
                            a.type +
                            ")",
                          a
                        );
                    }
                  },
                  function (d) {
                    g.__DEV__ &&
                      b._logger.debug(
                        "error ending transaction(" +
                          a.id +
                          ", " +
                          a.name +
                          ")",
                        d
                      );
                  }
                );
              };
              c.setSession = function (a) {
                var b = this._config.get("session");
                b &&
                  ("boolean" == typeof b
                    ? (a.session = {
                        id: (0, t.generateRandomId)(16),
                        sequence: 1,
                      })
                    : b.timestamp &&
                      Date.now() - b.timestamp > r.SESSION_TIMEOUT
                    ? (a.session = {
                        id: (0, t.generateRandomId)(16),
                        sequence: 1,
                      })
                    : (a.session = {
                        id: b.id,
                        sequence: b.sequence ? b.sequence + 1 : 1,
                      }),
                  (a = {
                    session: {
                      id: a.session.id,
                      sequence: a.session.sequence,
                      timestamp: Date.now(),
                    },
                  }),
                  this._config.setConfig(a),
                  this._config.setLocalConfig(a, !0));
              };
              c.adjustTransactionTime = function (a) {
                var b = a.spans,
                  d = (0, t.getEarliestSpan)(b);
                d && d._start < a._start && (a._start = d._start);
                d = ((0, t.getLatestNonXHRSpan)(b) || {})._end || 0;
                if (a.type === r.PAGE_LOAD) {
                  var c = a._end - r.PAGE_LOAD_DELAY,
                    f = m.metrics.lcp || 0,
                    h = ((0, t.getLatestXHRSpan)(b) || {})._end || 0;
                  a._end = Math.max(d, h, f, c);
                } else d > a._end && (a._end = d);
                this.truncateSpans(b, a._end);
              };
              c.truncateSpans = function (a, b) {
                for (var d = 0; d < a.length; d++) {
                  var c = a[d];
                  c._end > b && ((c._end = b), (c.type += r.TRUNCATED_TYPE));
                  c._start > b && (c._start = b);
                }
              };
              c.shouldIgnoreTransaction = function (a) {
                var b = this._config.get("ignoreTransactions");
                if (b && b.length)
                  for (var d = 0; d < b.length; d++) {
                    var c = b[d];
                    if ("function" === typeof c.test) {
                      if (c.test(a)) return !0;
                    } else if (c === a) return !0;
                  }
                return !1;
              };
              c.startSpan = function (a, b, e) {
                var d = this.getCurrentTransaction();
                d ||
                  (d = this.createCurrentTransaction(
                    void 0,
                    r.TEMPORARY_TYPE,
                    this.createOptions({ canReuse: !0, managed: !0 })
                  ));
                b = d.startSpan(a, b, e);
                g.__DEV__ &&
                  this._logger.debug(
                    "startSpan(" + a + ", " + b.type + ")",
                    "on transaction(" + d.id + ", " + d.name + ")"
                  );
                return b;
              };
              c.endSpan = function (a, b) {
                if (a) {
                  if (g.__DEV__) {
                    var d = this.getCurrentTransaction();
                    d &&
                      this._logger.debug(
                        "endSpan(" + a.name + ", " + a.type + ")",
                        "on transaction(" + d.id + ", " + d.name + ")"
                      );
                  }
                  a.end(null, b);
                }
              };
              return a;
            })();
            c["default"] = q;
          },
        "../rum-core/dist/es/performance-monitoring/transaction.js": function (
          q,
          c,
          a
        ) {
          function n(a, c) {
            a.prototype = Object.create(c.prototype);
            a.prototype.constructor = a;
            p(a, c);
          }
          function p(a, c) {
            p =
              Object.setPrototypeOf ||
              function (a, b) {
                a.__proto__ = b;
                return a;
              };
            return p(a, c);
          }
          a.r(c);
          var m = a("../rum-core/dist/es/performance-monitoring/span.js");
          q = a("../rum-core/dist/es/performance-monitoring/span-base.js");
          var t = a("../rum-core/dist/es/common/utils.js"),
            l = a("../rum-core/dist/es/common/constants.js"),
            r = a("../rum-core/dist/es/performance-monitoring/breakdown.js");
          a = (function (a) {
            function c(b, c, d) {
              b = a.call(this, b, c, d) || this;
              b.traceId = (0, t.generateRandomId)();
              b.marks = void 0;
              b.spans = [];
              b._activeSpans = {};
              b._activeTasks = new Set();
              b.blocked = !1;
              b.captureTimings = !1;
              b.breakdownTimings = [];
              b.sampleRate = b.options.transactionSampleRate;
              b.sampled = Math.random() <= b.sampleRate;
              return b;
            }
            n(c, a);
            var f = c.prototype;
            f.addMarks = function (a) {
              this.marks = (0, t.merge)(this.marks || {}, a);
            };
            f.mark = function (a) {
              a = (0, t.removeInvalidChars)(a);
              var b = (0, t.now)() - this._start,
                d = {};
              d[a] = b;
              this.addMarks({ custom: d });
            };
            f.canReuse = function () {
              var a = this.options.reuseThreshold || l.REUSABILITY_THRESHOLD;
              return (
                !!this.options.canReuse &&
                !this.ended &&
                (0, t.now)() - this._start < a
              );
            };
            f.redefine = function (a, c, d) {
              a && (this.name = a);
              c && (this.type = c);
              d &&
                ((this.options.reuseThreshold = d.reuseThreshold),
                (0, t.extend)(this.options, d));
            };
            f.startSpan = function (a, c, d) {
              var b = this;
              if (!this.ended)
                return (
                  (d = (0, t.extend)({}, d)),
                  (d.onEnd = function (a) {
                    b._onSpanEnd(a);
                  }),
                  (d.traceId = this.traceId),
                  (d.sampled = this.sampled),
                  (d.sampleRate = this.sampleRate),
                  d.parentId || (d.parentId = this.id),
                  (a = new m.default(a, c, d)),
                  (this._activeSpans[a.id] = a),
                  d.blocking && this.addTask(a.id),
                  a
                );
            };
            f.isFinished = function () {
              return !this.blocked && 0 === this._activeTasks.size;
            };
            f.detectFinish = function () {
              this.isFinished() && this.end();
            };
            f.end = function (a) {
              if (!this.ended) {
                this.ended = !0;
                this._end = (0, t.getTime)(a);
                for (var b in this._activeSpans) {
                  var d = this._activeSpans[b];
                  d.type += l.TRUNCATED_TYPE;
                  d.end(a);
                }
                this.callOnEnd();
              }
            };
            f.captureBreakdown = function () {
              this.breakdownTimings = (0, r.captureBreakdown)(this);
            };
            f.block = function (a) {
              (this.blocked = a) || this.detectFinish();
            };
            f.addTask = function (a) {
              a || (a = "task-" + (0, t.generateRandomId)(16));
              this._activeTasks.add(a);
              return a;
            };
            f.removeTask = function (a) {
              this._activeTasks.delete(a) && this.detectFinish();
            };
            f.resetFields = function () {
              this.spans = [];
              this.sampleRate = 0;
            };
            f._onSpanEnd = function (a) {
              this.spans.push(a);
              delete this._activeSpans[a.id];
              this.removeTask(a.id);
            };
            f.isManaged = function () {
              return !!this.options.managed;
            };
            return c;
          })(q.default);
          c["default"] = a;
        },
        "../rum-core/dist/es/state.js": function (q, c, a) {
          a.r(c);
          a.d(c, {
            __DEV__: function () {
              return n;
            },
            state: function () {
              return p;
            },
          });
          var n = !0,
            p = {
              bootstrapTime: null,
              lastHiddenStart: Number.MIN_SAFE_INTEGER,
            };
        },
        "./src/apm-base.js": function (q, c, a) {
          a.r(c);
          a.d(c, {
            default: function () {
              return l;
            },
          });
          var n = a("../rum-core/dist/es/common/constants.js"),
            p = a("../rum-core/dist/es/common/instrument.js"),
            m = a("../rum-core/dist/es/common/observers/page-visibility.js"),
            t = a("../rum-core/dist/es/common/observers/page-clicks.js"),
            l = (function () {
              function a(a, c) {
                this._disable = c;
                this.serviceFactory = a;
                this._initialized = !1;
              }
              var c = a.prototype;
              c.isEnabled = function () {
                return !this._disable;
              };
              c.isActive = function () {
                var a = this.serviceFactory.getService(n.CONFIG_SERVICE);
                return this.isEnabled() && this._initialized && a.get("active");
              };
              c.init = function (a) {
                var c = this;
                if (this.isEnabled() && !this._initialized) {
                  this._initialized = !0;
                  var b = this.serviceFactory.getService([
                      n.CONFIG_SERVICE,
                      n.LOGGING_SERVICE,
                      n.TRANSACTION_SERVICE,
                    ]),
                    f = b[0],
                    d = b[1];
                  b = b[2];
                  f.setVersion("5.11.1");
                  this.config(a);
                  a = f.get("logLevel");
                  d.setLevel(a);
                  if (f.get("active")) {
                    this.serviceFactory.init();
                    var k = (0, p.getInstrumentationFlags)(
                      f.get("instrument"),
                      f.get("disableInstrumentations")
                    );
                    this.serviceFactory
                      .getService(n.PERFORMANCE_MONITORING)
                      .init(k);
                    k[n.ERROR] &&
                      this.serviceFactory
                        .getService(n.ERROR_LOGGING)
                        .registerListeners();
                    f.get("session") &&
                      (d = f.getLocalConfig()) &&
                      d.session &&
                      f.setConfig({ session: d.session });
                    d = function () {
                      return k[n.PAGE_LOAD] && c._sendPageLoadMetrics();
                    };
                    f.get("centralConfig")
                      ? this.fetchCentralConfig().then(d)
                      : d();
                    (0, m.observePageVisibility)(f, b);
                    k[n.EVENT_TARGET] &&
                      k[n.CLICK] &&
                      (0, t.observePageClicks)(b);
                  } else (this._disable = !0), d.warn("RUM agent is inactive");
                }
                return this;
              };
              c.fetchCentralConfig = function () {
                var a = this.serviceFactory.getService([
                    n.APM_SERVER,
                    n.LOGGING_SERVICE,
                    n.CONFIG_SERVICE,
                  ]),
                  c = a[1],
                  b = a[2];
                return a[0]
                  .fetchConfig(b.get("serviceName"), b.get("environment"))
                  .then(function (a) {
                    var d = a.transaction_sample_rate;
                    if (d) {
                      d = Number(d);
                      d = { transactionSampleRate: d };
                      var f = b.validate(d).invalid;
                      0 === f.length
                        ? b.setConfig(d)
                        : ((d = f[0]),
                          c.warn(
                            'invalid value "' +
                              d.value +
                              '" for ' +
                              d.key +
                              ". Allowed: " +
                              d.allowed +
                              "."
                          ));
                    }
                    return a;
                  })
                  .catch(function (a) {
                    c.warn("failed fetching config:", a);
                  });
              };
              c._sendPageLoadMetrics = function () {
                var a = this.startTransaction(void 0, n.PAGE_LOAD, {
                  managed: !0,
                  canReuse: !0,
                });
                if (a) {
                  a.addTask(n.PAGE_LOAD);
                  var c = function () {
                    setTimeout(function () {
                      return a.removeTask(n.PAGE_LOAD);
                    }, n.PAGE_LOAD_DELAY);
                  };
                  "complete" === document.readyState
                    ? c()
                    : window.addEventListener("load", c);
                }
              };
              c.observe = function (a, c) {
                this.serviceFactory
                  .getService(n.CONFIG_SERVICE)
                  .events.observe(a, c);
              };
              c.config = function (a) {
                var c = this.serviceFactory.getService(n.CONFIG_SERVICE),
                  b = c.validate(a),
                  f = b.missing,
                  d = b.invalid;
                if (0 === f.length && 0 === d.length) c.setConfig(a);
                else {
                  a = this.serviceFactory.getService(n.LOGGING_SERVICE);
                  var k = "RUM agent isn't correctly configured. ";
                  0 < f.length &&
                    ((k += f.join(", ") + " is missing"),
                    0 < d.length && (k += ", "));
                  d.forEach(function (a, b) {
                    k +=
                      a.key +
                      ' "' +
                      a.value +
                      '" contains invalid characters! (allowed: ' +
                      a.allowed +
                      ")" +
                      (b !== d.length - 1 ? ", " : "");
                  });
                  a.error(k);
                  c.setConfig({ active: !1 });
                }
              };
              c.setUserContext = function (a) {
                this.serviceFactory
                  .getService(n.CONFIG_SERVICE)
                  .setUserContext(a);
              };
              c.setCustomContext = function (a) {
                this.serviceFactory
                  .getService(n.CONFIG_SERVICE)
                  .setCustomContext(a);
              };
              c.addLabels = function (a) {
                this.serviceFactory.getService(n.CONFIG_SERVICE).addLabels(a);
              };
              c.setInitialPageLoadName = function (a) {
                this.serviceFactory
                  .getService(n.CONFIG_SERVICE)
                  .setConfig({ pageLoadTransactionName: a });
              };
              c.startTransaction = function (a, c, b) {
                if (this.isEnabled())
                  return this.serviceFactory
                    .getService(n.TRANSACTION_SERVICE)
                    .startTransaction(a, c, b);
              };
              c.startSpan = function (a, c, b) {
                if (this.isEnabled())
                  return this.serviceFactory
                    .getService(n.TRANSACTION_SERVICE)
                    .startSpan(a, c, b);
              };
              c.getCurrentTransaction = function () {
                if (this.isEnabled())
                  return this.serviceFactory
                    .getService(n.TRANSACTION_SERVICE)
                    .getCurrentTransaction();
              };
              c.captureError = function (a) {
                if (this.isEnabled())
                  return this.serviceFactory
                    .getService(n.ERROR_LOGGING)
                    .logError(a);
              };
              c.addFilter = function (a) {
                this.serviceFactory.getService(n.CONFIG_SERVICE).addFilter(a);
              };
              return a;
            })();
        },
        "../../node_modules/error-stack-parser/error-stack-parser.js":
          function (q, c, a) {
            var n, p, m;
            (function (t, l) {
              !((p = [a("../../node_modules/stackframe/stackframe.js")]),
              (n = l),
              (m = "function" === typeof n ? n.apply(c, p) : n),
              void 0 !== m && (q.exports = m));
            })(this, function (a) {
              function c(a, c, d) {
                if ("function" === typeof Array.prototype.map)
                  return a.map(c, d);
                for (var b = Array(a.length), e = 0; e < a.length; e++)
                  b[e] = c.call(d, a[e]);
                return b;
              }
              function m(a, c, d) {
                if ("function" === typeof Array.prototype.filter)
                  return a.filter(c, d);
                for (var b = [], e = 0; e < a.length; e++)
                  c.call(d, a[e]) && b.push(a[e]);
                return b;
              }
              var f = /(^|@)\S+:\d+/,
                g = /^\s*at .*(\S+:\d+|\(native\))/m,
                p = /^(eval@)?(\[native code\])?$/;
              return {
                parse: function (a) {
                  if (
                    "undefined" !== typeof a.stacktrace ||
                    "undefined" !== typeof a["opera#sourceloc"]
                  )
                    return this.parseOpera(a);
                  if (a.stack && a.stack.match(g)) return this.parseV8OrIE(a);
                  if (a.stack) return this.parseFFOrSafari(a);
                  throw Error("Cannot parse given Error object");
                },
                extractLocation: function (a) {
                  if (-1 === a.indexOf(":")) return [a];
                  a = /(.+?)(?::(\d+))?(?::(\d+))?$/.exec(
                    a.replace(/[\(\)]/g, "")
                  );
                  return [a[1], a[2] || void 0, a[3] || void 0];
                },
                parseV8OrIE: function (b) {
                  b = m(
                    b.stack.split("\n"),
                    function (a) {
                      return !!a.match(g);
                    },
                    this
                  );
                  return c(
                    b,
                    function (b) {
                      -1 < b.indexOf("(eval ") &&
                        (b = b
                          .replace(/eval code/g, "eval")
                          .replace(/(\(eval at [^\()]*)|(\),.*$)/g, ""));
                      var d = b
                          .replace(/^\s+/, "")
                          .replace(/\(eval code/g, "(")
                          .split(/\s+/)
                          .slice(1),
                        c = this.extractLocation(d.pop());
                      d = d.join(" ") || void 0;
                      a: {
                        var e = ["eval", "\x3canonymous\x3e"];
                        var f = c[0];
                        if ("function" === typeof Array.prototype.indexOf)
                          e = e.indexOf(f);
                        else {
                          for (var h = 0; h < e.length; h++)
                            if (e[h] === f) {
                              e = h;
                              break a;
                            }
                          e = -1;
                        }
                      }
                      return new a(
                        d,
                        void 0,
                        -1 < e ? void 0 : c[0],
                        c[1],
                        c[2],
                        b
                      );
                    },
                    this
                  );
                },
                parseFFOrSafari: function (b) {
                  b = m(
                    b.stack.split("\n"),
                    function (a) {
                      return !a.match(p);
                    },
                    this
                  );
                  return c(
                    b,
                    function (b) {
                      -1 < b.indexOf(" \x3e eval") &&
                        (b = b.replace(
                          / line (\d+)(?: > eval line \d+)* > eval:\d+:\d+/g,
                          ":$1"
                        ));
                      if (-1 === b.indexOf("@") && -1 === b.indexOf(":"))
                        return new a(b);
                      var d = b.split("@"),
                        c = this.extractLocation(d.pop());
                      d = d.join("@") || void 0;
                      return new a(d, void 0, c[0], c[1], c[2], b);
                    },
                    this
                  );
                },
                parseOpera: function (a) {
                  return !a.stacktrace ||
                    (-1 < a.message.indexOf("\n") &&
                      a.message.split("\n").length >
                        a.stacktrace.split("\n").length)
                    ? this.parseOpera9(a)
                    : a.stack
                    ? this.parseOpera11(a)
                    : this.parseOpera10(a);
                },
                parseOpera9: function (b) {
                  var c = /Line (\d+).*script (?:in )?(\S+)/i;
                  b = b.message.split("\n");
                  for (var d = [], f = 2, e = b.length; f < e; f += 2) {
                    var g = c.exec(b[f]);
                    g &&
                      d.push(new a(void 0, void 0, g[2], g[1], void 0, b[f]));
                  }
                  return d;
                },
                parseOpera10: function (b) {
                  var c =
                    /Line (\d+).*script (?:in )?(\S+)(?:: In function (\S+))?$/i;
                  b = b.stacktrace.split("\n");
                  for (var d = [], f = 0, e = b.length; f < e; f += 2) {
                    var g = c.exec(b[f]);
                    g &&
                      d.push(
                        new a(g[3] || void 0, void 0, g[2], g[1], void 0, b[f])
                      );
                  }
                  return d;
                },
                parseOpera11: function (b) {
                  b = m(
                    b.stack.split("\n"),
                    function (a) {
                      return !!a.match(f) && !a.match(/^Error created at/);
                    },
                    this
                  );
                  return c(
                    b,
                    function (b) {
                      var d = b.split("@"),
                        c = this.extractLocation(d.pop()),
                        e = d.shift() || "";
                      d =
                        e
                          .replace(/<anonymous function(: (\w+))?>/, "$2")
                          .replace(/\([^\)]*\)/g, "") || void 0;
                      var f;
                      e.match(/\(([^\)]*)\)/) &&
                        (f = e.replace(/^[^\(]+\(([^\)]*)\)$/, "$1"));
                      f =
                        void 0 === f || "[arguments not available]" === f
                          ? void 0
                          : f.split(",");
                      return new a(d, f, c[0], c[1], c[2], b);
                    },
                    this
                  );
                },
              };
            });
          },
        "../../node_modules/opentracing/lib/constants.js": function (q, c) {
          Object.defineProperty(c, "__esModule", { value: !0 });
          c.FORMAT_BINARY = "binary";
          c.FORMAT_TEXT_MAP = "text_map";
          c.FORMAT_HTTP_HEADERS = "http_headers";
          c.REFERENCE_CHILD_OF = "child_of";
          c.REFERENCE_FOLLOWS_FROM = "follows_from";
        },
        "../../node_modules/opentracing/lib/functions.js": function (q, c, a) {
          Object.defineProperty(c, "__esModule", { value: !0 });
          var n = a("../../node_modules/opentracing/lib/constants.js"),
            p = a("../../node_modules/opentracing/lib/reference.js"),
            m = a("../../node_modules/opentracing/lib/span.js");
          c.childOf = function (a) {
            a instanceof m.default && (a = a.context());
            return new p.default(n.REFERENCE_CHILD_OF, a);
          };
          c.followsFrom = function (a) {
            a instanceof m.default && (a = a.context());
            return new p.default(n.REFERENCE_FOLLOWS_FROM, a);
          };
        },
        "../../node_modules/opentracing/lib/noop.js": function (q, c, a) {
          Object.defineProperty(c, "__esModule", { value: !0 });
          var n = a("../../node_modules/opentracing/lib/span.js"),
            p = a("../../node_modules/opentracing/lib/span_context.js"),
            m = a("../../node_modules/opentracing/lib/tracer.js");
          c.tracer = null;
          c.spanContext = null;
          c.span = null;
          c.initialize = function () {
            c.tracer = new m.default();
            c.span = new n.default();
            c.spanContext = new p.default();
          };
        },
        "../../node_modules/opentracing/lib/reference.js": function (q, c, a) {
          Object.defineProperty(c, "__esModule", { value: !0 });
          var n = a("../../node_modules/opentracing/lib/span.js");
          q = (function () {
            function a(a, c) {
              this._type = a;
              this._referencedContext =
                c instanceof n.default ? c.context() : c;
            }
            a.prototype.type = function () {
              return this._type;
            };
            a.prototype.referencedContext = function () {
              return this._referencedContext;
            };
            return a;
          })();
          c.default = q;
        },
        "../../node_modules/opentracing/lib/span.js": function (q, c, a) {
          Object.defineProperty(c, "__esModule", { value: !0 });
          var n = a("../../node_modules/opentracing/lib/noop.js");
          q = (function () {
            function a() {}
            a.prototype.context = function () {
              return this._context();
            };
            a.prototype.tracer = function () {
              return this._tracer();
            };
            a.prototype.setOperationName = function (a) {
              this._setOperationName(a);
              return this;
            };
            a.prototype.setBaggageItem = function (a, c) {
              this._setBaggageItem(a, c);
              return this;
            };
            a.prototype.getBaggageItem = function (a) {
              return this._getBaggageItem(a);
            };
            a.prototype.setTag = function (a, c) {
              this._addTags(((l = {}), (l[a] = c), l));
              return this;
              var l;
            };
            a.prototype.addTags = function (a) {
              this._addTags(a);
              return this;
            };
            a.prototype.log = function (a, c) {
              this._log(a, c);
              return this;
            };
            a.prototype.logEvent = function (a, c) {
              return this._log({ event: a, payload: c });
            };
            a.prototype.finish = function (a) {
              this._finish(a);
            };
            a.prototype._context = function () {
              return n.spanContext;
            };
            a.prototype._tracer = function () {
              return n.tracer;
            };
            a.prototype._setOperationName = function (a) {};
            a.prototype._setBaggageItem = function (a, c) {};
            a.prototype._getBaggageItem = function (a) {};
            a.prototype._addTags = function (a) {};
            a.prototype._log = function (a, c) {};
            a.prototype._finish = function (a) {};
            return a;
          })();
          c.Span = q;
          c.default = q;
        },
        "../../node_modules/opentracing/lib/span_context.js": function (q, c) {
          Object.defineProperty(c, "__esModule", { value: !0 });
          q = (function () {
            return function () {};
          })();
          c.SpanContext = q;
          c.default = q;
        },
        "../../node_modules/opentracing/lib/tracer.js": function (q, c, a) {
          Object.defineProperty(c, "__esModule", { value: !0 });
          var n = a("../../node_modules/opentracing/lib/functions.js"),
            p = a("../../node_modules/opentracing/lib/noop.js"),
            m = a("../../node_modules/opentracing/lib/span.js");
          q = (function () {
            function a() {}
            a.prototype.startSpan = function (a, c) {
              void 0 === c && (c = {});
              if (c.childOf) {
                var f = n.childOf(c.childOf);
                c.references ? c.references.push(f) : (c.references = [f]);
                delete c.childOf;
              }
              return this._startSpan(a, c);
            };
            a.prototype.inject = function (a, c, f) {
              a instanceof m.default && (a = a.context());
              return this._inject(a, c, f);
            };
            a.prototype.extract = function (a, c) {
              return this._extract(a, c);
            };
            a.prototype._startSpan = function (a, c) {
              return p.span;
            };
            a.prototype._inject = function (a, c, f) {};
            a.prototype._extract = function (a, c) {
              return p.spanContext;
            };
            return a;
          })();
          c.Tracer = q;
          c.default = q;
        },
        "../../node_modules/promise-polyfill/src/finally.js": function (
          q,
          c,
          a
        ) {
          a.r(c);
          c["default"] = function (a) {
            var c = this.constructor;
            return this.then(
              function (m) {
                return c.resolve(a()).then(function () {
                  return m;
                });
              },
              function (m) {
                return c.resolve(a()).then(function () {
                  return c.reject(m);
                });
              }
            );
          };
        },
        "../../node_modules/promise-polyfill/src/index.js": function (q, c, a) {
          function n() {}
          function p(a, b) {
            return function () {
              a.apply(b, arguments);
            };
          }
          function m(a) {
            if (!(this instanceof m))
              throw new TypeError("Promises must be constructed via new");
            if ("function" !== typeof a) throw new TypeError("not a function");
            this._state = 0;
            this._handled = !1;
            this._value = void 0;
            this._deferreds = [];
            u(a, this);
          }
          function t(a, b) {
            for (; 3 === a._state; ) a = a._value;
            0 === a._state
              ? a._deferreds.push(b)
              : ((a._handled = !0),
                m._immediateFn(function () {
                  var c = 1 === a._state ? b.onFulfilled : b.onRejected;
                  if (null === c) (1 === a._state ? l : r)(b.promise, a._value);
                  else {
                    try {
                      var d = c(a._value);
                    } catch (v) {
                      r(b.promise, v);
                      return;
                    }
                    l(b.promise, d);
                  }
                }));
          }
          function l(a, b) {
            try {
              if (b === a)
                throw new TypeError(
                  "A promise cannot be resolved with itself."
                );
              if (b && ("object" === typeof b || "function" === typeof b)) {
                var c = b.then;
                if (b instanceof m) {
                  a._state = 3;
                  a._value = b;
                  f(a);
                  return;
                }
                if ("function" === typeof c) {
                  u(p(c, b), a);
                  return;
                }
              }
              a._state = 1;
              a._value = b;
              f(a);
            } catch (e) {
              r(a, e);
            }
          }
          function r(a, b) {
            a._state = 2;
            a._value = b;
            f(a);
          }
          function f(a) {
            2 === a._state &&
              0 === a._deferreds.length &&
              m._immediateFn(function () {
                a._handled || m._unhandledRejectionFn(a._value);
              });
            for (var b = 0, c = a._deferreds.length; b < c; b++)
              t(a, a._deferreds[b]);
            a._deferreds = null;
          }
          function g(a, b, c) {
            this.onFulfilled = "function" === typeof a ? a : null;
            this.onRejected = "function" === typeof b ? b : null;
            this.promise = c;
          }
          function u(a, b) {
            var c = !1;
            try {
              a(
                function (a) {
                  c || ((c = !0), l(b, a));
                },
                function (a) {
                  c || ((c = !0), r(b, a));
                }
              );
            } catch (e) {
              c || ((c = !0), r(b, e));
            }
          }
          a.r(c);
          q = a("../../node_modules/promise-polyfill/src/finally.js");
          var b = setTimeout;
          m.prototype["catch"] = function (a) {
            return this.then(null, a);
          };
          m.prototype.then = function (a, b) {
            var c = new this.constructor(n);
            t(this, new g(a, b, c));
            return c;
          };
          m.prototype["finally"] = q.default;
          m.all = function (a) {
            return new m(function (b, c) {
              function d(a, e) {
                try {
                  if (e && ("object" === typeof e || "function" === typeof e)) {
                    var g = e.then;
                    if ("function" === typeof g) {
                      g.call(
                        e,
                        function (b) {
                          d(a, b);
                        },
                        c
                      );
                      return;
                    }
                  }
                  f[a] = e;
                  0 === --h && b(f);
                } catch (y) {
                  c(y);
                }
              }
              if (!a || "undefined" === typeof a.length)
                return c(new TypeError("Promise.all accepts an array"));
              var f = Array.prototype.slice.call(a);
              if (0 === f.length) return b([]);
              for (var h = f.length, g = 0; g < f.length; g++) d(g, f[g]);
            });
          };
          m.resolve = function (a) {
            return a && "object" === typeof a && a.constructor === m
              ? a
              : new m(function (b) {
                  b(a);
                });
          };
          m.reject = function (a) {
            return new m(function (b, c) {
              c(a);
            });
          };
          m.race = function (a) {
            return new m(function (b, c) {
              if (!a || "undefined" === typeof a.length)
                return c(new TypeError("Promise.race accepts an array"));
              for (var d = 0, f = a.length; d < f; d++)
                m.resolve(a[d]).then(b, c);
            });
          };
          m._immediateFn =
            ("function" === typeof setImmediate &&
              function (a) {
                setImmediate(a);
              }) ||
            function (a) {
              b(a, 0);
            };
          m._unhandledRejectionFn = function (a) {
            "undefined" !== typeof console &&
              console &&
              console.warn("Possible Unhandled Promise Rejection:", a);
          };
          c["default"] = m;
        },
        "../../node_modules/stackframe/stackframe.js": function (q, c) {
          var a, n, p;
          (function (m, t) {
            !((n = []),
            (a = t),
            (p = "function" === typeof a ? a.apply(c, n) : a),
            void 0 !== p && (q.exports = p));
          })(this, function () {
            function a(a) {
              return !isNaN(parseFloat(a)) && isFinite(a);
            }
            function c(a, c, f, g, m, b) {
              void 0 !== a && this.setFunctionName(a);
              void 0 !== c && this.setArgs(c);
              void 0 !== f && this.setFileName(f);
              void 0 !== g && this.setLineNumber(g);
              void 0 !== m && this.setColumnNumber(m);
              void 0 !== b && this.setSource(b);
            }
            c.prototype = {
              getFunctionName: function () {
                return this.functionName;
              },
              setFunctionName: function (a) {
                this.functionName = String(a);
              },
              getArgs: function () {
                return this.args;
              },
              setArgs: function (a) {
                if ("[object Array]" !== Object.prototype.toString.call(a))
                  throw new TypeError("Args must be an Array");
                this.args = a;
              },
              getFileName: function () {
                return this.fileName;
              },
              setFileName: function (a) {
                this.fileName = String(a);
              },
              getLineNumber: function () {
                return this.lineNumber;
              },
              setLineNumber: function (c) {
                if (!a(c)) throw new TypeError("Line Number must be a Number");
                this.lineNumber = Number(c);
              },
              getColumnNumber: function () {
                return this.columnNumber;
              },
              setColumnNumber: function (c) {
                if (!a(c))
                  throw new TypeError("Column Number must be a Number");
                this.columnNumber = Number(c);
              },
              getSource: function () {
                return this.source;
              },
              setSource: function (a) {
                this.source = String(a);
              },
              toString: function () {
                var c = this.getFunctionName() || "{anonymous}",
                  m = "(" + (this.getArgs() || []).join(",") + ")",
                  f = this.getFileName() ? "@" + this.getFileName() : "",
                  g = a(this.getLineNumber()) ? ":" + this.getLineNumber() : "",
                  n = a(this.getColumnNumber())
                    ? ":" + this.getColumnNumber()
                    : "";
                return c + m + f + g + n;
              },
            };
            return c;
          });
        },
      },
      Z = {};
    !(function () {
      w.n = function (q) {
        var c =
          q && q.__esModule
            ? function () {
                return q["default"];
              }
            : function () {
                return q;
              };
        w.d(c, { a: c });
        return c;
      };
    })();
    !(function () {
      w.d = function (q, c) {
        for (var a in c)
          w.o(c, a) &&
            !w.o(q, a) &&
            Object.defineProperty(q, a, { enumerable: !0, get: c[a] });
      };
    })();
    !(function () {
      w.o = function (q, c) {
        return Object.prototype.hasOwnProperty.call(q, c);
      };
    })();
    !(function () {
      w.r = function (q) {
        "undefined" !== typeof Symbol &&
          Symbol.toStringTag &&
          Object.defineProperty(q, Symbol.toStringTag, { value: "Module" });
        Object.defineProperty(q, "__esModule", { value: !0 });
      };
    })();
    var A = {};
    !(function () {
      w.r(A);
      w.d(A, {
        init: function () {
          return m;
        },
        apmBase: function () {
          return p;
        },
        ApmBase: function () {
          return n.default;
        },
        apm: function () {
          return p;
        },
      });
      var q = w("../rum-core/dist/es/common/utils.js"),
        c = w("../rum-core/dist/es/bootstrap.js"),
        a = w("../rum-core/dist/es/index.js"),
        n = w("./src/apm-base.js"),
        p = (function () {
          if (q.isBrowser && window.elasticApm) return window.elasticApm;
          var m = (0, c.bootstrap)(),
            l = (0, a.createServiceFactory)();
          m = new n.default(l, !m);
          q.isBrowser && (window.elasticApm = m);
          return m;
        })(),
        m = p.init.bind(p);
      A["default"] = m;
    })();
    return A;
  })();
});
